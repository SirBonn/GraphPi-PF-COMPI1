// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: C:/sirbochocho/Universidad/PS2024/COMPI/GraphPi/app/src/main/jflex/Lexer.flex

package srbn.graphpi.BackEnd.Lexer;

import java.util.ArrayList;
import srbn.graphpi.BackEnd.DomainObjs.Errors.*;
import srbn.graphpi.BackEnd.Parser.ParserSym;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\1\4\3\0"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\0"+
    "\1\14\12\15\1\16\1\17\1\20\1\21\1\22\2\0"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\34\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\0\1\55\3\0\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\34\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\56\1\0\1\57\7\0\1\1\32\0\1\1\217\0"+
    "\2\60\115\0\1\61\u0200\0\1\1\177\0\13\1\35\0"+
    "\2\1\5\0\1\1\57\0\1\1\312\0\1\62\325\0"+
    "\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\6\22\1\23\1\24\1\25\1\26"+
    "\1\1\1\27\21\0\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\35\1\36\1\37\2\0\1\40\1\0\1\41"+
    "\23\0\1\41\1\0\1\41\1\0\1\42\1\0\1\43"+
    "\26\0\1\44\1\0\1\45\1\0\1\46\32\0\1\47"+
    "\6\0\1\41\5\0\1\41\4\0\2\41\1\0\1\41"+
    "\7\0\2\41\1\0\1\50\5\0\1\51\1\0\1\41"+
    "\2\0\1\52\1\53\1\0\1\54\2\41\5\0\1\55"+
    "\1\56\4\0\2\41\1\0\1\57\2\0\1\41\1\60"+
    "\1\61\2\0\1\62\6\0\1\63\1\64\3\0\1\65"+
    "\3\0\1\41\3\0\2\41\5\0\1\66\1\41\2\0"+
    "\1\67\1\70\1\0\1\41\3\0\1\71\1\0\1\41"+
    "\1\0\1\72\2\41\1\0\1\41\1\73\1\0\1\74"+
    "\1\75\1\0\1\76\4\0\2\41\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\63\0\63\0\63"+
    "\0\377\0\u0132\0\63\0\u0165\0\u0198\0\u01cb\0\63\0\63"+
    "\0\u01fe\0\u0231\0\u0264\0\63\0\u0297\0\u02ca\0\u02fd\0\u0330"+
    "\0\u0363\0\63\0\63\0\63\0\63\0\u0330\0\63\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\63\0\63\0\63\0\63\0\u06f9\0\63\0\63\0\63"+
    "\0\63\0\u072c\0\u075f\0\63\0\u0792\0\63\0\u07c5\0\u07f8"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\63\0\u0c5a\0\63"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\63\0\u10ef"+
    "\0\63\0\u1122\0\63\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\63\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e"+
    "\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\63\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\u1d7c\0\63\0\u1daf\0\u1de2\0\u1e15\0\u1e48"+
    "\0\63\0\63\0\u1e7b\0\63\0\u1eae\0\u1ee1\0\u1f14\0\u1f47"+
    "\0\u1f7a\0\u1fad\0\u1fe0\0\63\0\63\0\u2013\0\u2046\0\u2079"+
    "\0\u20ac\0\u20df\0\u2112\0\u2145\0\63\0\u2178\0\u21ab\0\u21de"+
    "\0\63\0\63\0\u2211\0\u2244\0\63\0\u2277\0\u22aa\0\u22dd"+
    "\0\u2310\0\u2343\0\u2376\0\63\0\63\0\u23a9\0\u23dc\0\u240f"+
    "\0\63\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574"+
    "\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\63"+
    "\0\u270c\0\u273f\0\u2772\0\63\0\63\0\u27a5\0\u27d8\0\u280b"+
    "\0\u283e\0\u2871\0\63\0\u28a4\0\u28d7\0\u290a\0\63\0\u293d"+
    "\0\u2970\0\u29a3\0\u29d6\0\63\0\u2a09\0\63\0\63\0\u2a3c"+
    "\0\63\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\63"+
    "\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\3\24\1\25\1\26\1\27\2\24"+
    "\1\30\14\24\1\31\3\24\1\32\1\33\1\34\1\35"+
    "\1\36\2\2\64\0\1\3\102\0\1\37\41\0\3\40"+
    "\1\0\1\41\17\40\1\42\1\43\1\44\1\40\1\45"+
    "\1\40\1\46\1\47\1\40\1\50\1\51\1\40\1\52"+
    "\1\40\1\53\1\40\1\54\1\55\1\40\1\56\1\40"+
    "\1\57\1\60\5\40\1\47\1\54\1\50\21\0\1\61"+
    "\52\0\1\62\64\0\1\63\70\0\1\64\56\0\1\16"+
    "\24\0\1\65\41\0\1\66\62\0\1\67\62\0\1\70"+
    "\102\0\1\71\57\0\1\72\65\0\1\73\51\0\1\74"+
    "\64\0\1\75\30\0\3\40\1\76\62\40\1\76\11\40"+
    "\1\77\5\40\6\77\35\40\1\76\17\40\1\100\42\40"+
    "\1\76\17\40\1\101\6\40\1\102\6\40\1\103\24\40"+
    "\1\76\17\40\1\104\3\40\1\105\36\40\1\76\35\40"+
    "\1\106\24\40\1\76\23\40\1\107\36\40\1\76\21\40"+
    "\1\110\40\40\1\76\23\40\1\111\36\40\1\76\17\40"+
    "\1\112\3\40\1\113\3\40\1\114\24\40\1\114\5\40"+
    "\1\76\17\40\1\115\42\40\1\76\35\40\1\116\24\40"+
    "\1\76\27\40\1\117\24\40\1\117\5\40\1\76\27\40"+
    "\1\120\24\40\1\120\5\40\1\76\17\40\1\121\42\40"+
    "\1\122\17\40\1\123\42\40\1\124\17\40\1\125\37\40"+
    "\51\0\1\126\55\0\1\127\14\0\1\127\44\0\1\130"+
    "\52\0\1\131\24\0\1\131\2\0\3\40\1\76\11\40"+
    "\1\132\5\40\6\132\35\40\1\76\21\40\1\133\40\40"+
    "\1\76\41\40\1\134\20\40\1\76\17\40\1\135\42\40"+
    "\1\76\32\40\1\136\3\40\1\137\23\40\1\76\41\40"+
    "\1\140\20\40\1\76\40\40\1\141\14\40\1\141\4\40"+
    "\1\76\34\40\1\142\1\143\24\40\1\76\17\40\1\144"+
    "\42\40\1\76\35\40\1\145\24\40\1\76\46\40\1\146"+
    "\13\40\1\76\20\40\1\147\41\40\1\76\25\40\1\150"+
    "\34\40\1\76\34\40\1\151\25\40\1\76\33\40\1\152"+
    "\26\40\1\76\27\40\1\153\24\40\1\153\5\40\1\76"+
    "\47\40\1\154\12\40\1\76\41\40\1\155\20\40\1\76"+
    "\32\40\1\156\24\40\16\0\1\157\44\0\3\40\1\76"+
    "\45\40\1\160\11\40\16\0\1\161\44\0\3\40\1\76"+
    "\45\40\1\162\11\40\27\0\1\163\71\0\1\164\24\0"+
    "\3\40\1\76\11\40\1\165\5\40\6\165\35\40\1\76"+
    "\31\40\1\166\24\40\1\166\3\40\1\76\23\40\1\167"+
    "\36\40\1\76\37\40\1\170\22\40\1\76\35\40\1\171"+
    "\24\40\1\76\46\40\1\172\13\40\1\76\17\40\1\173"+
    "\42\40\1\76\21\40\1\174\40\40\1\76\41\40\1\175"+
    "\20\40\1\76\41\40\1\176\20\40\1\76\22\40\1\177"+
    "\37\40\1\76\34\40\1\200\25\40\1\76\44\40\1\201"+
    "\15\40\1\76\23\40\1\202\36\40\1\76\23\40\1\203"+
    "\36\40\1\76\23\40\1\204\5\40\1\205\24\40\1\205"+
    "\3\40\1\76\23\40\1\206\36\40\1\76\34\40\1\207"+
    "\25\40\1\76\23\40\1\210\36\40\1\76\32\40\1\211"+
    "\6\40\1\212\20\40\1\76\42\40\1\213\17\40\1\76"+
    "\27\40\1\214\24\40\1\214\5\40\1\76\27\40\1\215"+
    "\24\40\1\215\2\40\27\0\1\216\33\0\3\40\1\76"+
    "\11\40\1\217\5\40\6\217\35\40\1\76\25\40\1\220"+
    "\34\40\1\76\25\40\1\221\34\40\1\76\41\40\1\222"+
    "\20\40\1\76\37\40\1\223\22\40\1\76\37\40\1\224"+
    "\22\40\1\225\62\40\1\76\37\40\1\226\22\40\1\76"+
    "\24\40\1\227\13\40\1\230\14\40\1\230\4\40\1\76"+
    "\23\40\1\231\36\40\1\76\23\40\1\232\36\40\1\233"+
    "\62\40\1\76\35\40\1\234\24\40\1\76\32\40\1\235"+
    "\27\40\1\76\34\40\1\236\25\40\1\76\40\40\1\237"+
    "\14\40\1\237\4\40\1\240\62\40\1\241\62\40\1\76"+
    "\41\40\1\242\20\40\1\243\62\40\1\76\23\40\1\244"+
    "\36\40\1\76\32\40\1\211\27\40\1\76\23\40\1\245"+
    "\36\40\1\76\40\40\1\246\14\40\1\246\4\40\1\76"+
    "\40\40\1\247\14\40\1\247\4\40\1\76\11\40\1\250"+
    "\5\40\6\250\35\40\1\76\37\40\1\251\22\40\1\76"+
    "\35\40\1\252\24\40\1\253\62\40\1\254\62\40\1\76"+
    "\27\40\1\255\24\40\1\255\2\40\16\0\1\256\44\0"+
    "\3\40\1\76\27\40\1\257\24\40\1\257\5\40\1\76"+
    "\17\40\1\260\42\40\1\76\27\40\1\261\24\40\1\261"+
    "\5\40\1\76\37\40\1\262\22\40\1\76\37\40\1\263"+
    "\17\40\16\0\1\264\44\0\3\40\1\76\37\40\1\265"+
    "\22\40\1\266\62\40\1\76\22\40\1\267\37\40\1\76"+
    "\41\40\1\270\15\40\16\0\1\271\62\0\1\272\44\0"+
    "\3\40\1\76\40\40\1\273\14\40\1\273\1\40\16\0"+
    "\1\274\44\0\3\40\1\275\62\40\1\276\62\40\1\76"+
    "\32\40\1\277\27\40\1\76\32\40\1\300\27\40\1\76"+
    "\11\40\1\301\5\40\6\301\35\40\1\76\35\40\1\302"+
    "\24\40\1\76\37\40\1\303\17\40\16\0\1\304\62\0"+
    "\1\305\44\0\3\40\1\76\25\40\1\306\34\40\1\76"+
    "\36\40\1\307\23\40\1\76\33\40\1\310\26\40\1\76"+
    "\47\40\1\311\12\40\1\312\62\40\1\313\62\40\1\76"+
    "\22\40\1\314\34\40\16\0\1\315\44\0\3\40\1\76"+
    "\36\40\1\316\23\40\1\76\46\40\1\317\13\40\1\320"+
    "\57\40\16\0\1\321\62\0\1\322\44\0\3\40\1\76"+
    "\17\40\1\323\42\40\1\76\17\40\1\324\42\40\1\325"+
    "\62\40\1\76\42\40\1\326\17\40\1\76\46\40\1\327"+
    "\13\40\1\76\26\40\1\330\33\40\1\76\41\40\1\331"+
    "\20\40\1\76\27\40\1\332\24\40\1\332\5\40\1\76"+
    "\23\40\1\333\33\40\16\0\1\334\62\0\1\335\44\0"+
    "\3\40\1\76\40\40\1\336\14\40\1\336\4\40\1\76"+
    "\35\40\1\337\24\40\1\76\32\40\1\340\24\40\16\0"+
    "\1\341\44\0\3\40\1\76\20\40\1\342\41\40\1\76"+
    "\20\40\1\343\41\40\1\76\34\40\1\344\25\40\1\345"+
    "\62\40\1\76\41\40\1\346\20\40\1\76\27\40\1\347"+
    "\24\40\1\347\5\40\1\76\32\40\1\350\27\40\1\351"+
    "\62\40\1\352\62\40\1\76\40\40\1\353\14\40\1\353"+
    "\4\40\1\76\23\40\1\354\36\40\1\76\23\40\1\355"+
    "\36\40\1\76\23\40\1\356\36\40\1\76\22\40\1\357"+
    "\34\40\16\0\1\360\44\0\3\40\1\361\62\40\1\76"+
    "\35\40\1\362\24\40\1\76\46\40\1\363\10\40\16\0"+
    "\1\364\62\0\1\365\44\0\3\40\1\76\27\40\1\366"+
    "\24\40\1\366\5\40\1\367\62\40\1\76\32\40\1\370"+
    "\27\40\1\76\32\40\1\371\27\40\1\76\21\40\1\372"+
    "\35\40\16\0\1\373\44\0\3\40\1\76\34\40\1\374"+
    "\25\40\1\375\62\40\1\76\41\40\1\376\15\40\16\0"+
    "\1\377\44\0\3\40\1\u0100\62\40\1\u0101\62\40\1\76"+
    "\35\40\1\u0102\24\40\1\u0103\57\40\16\0\1\u0104\44\0"+
    "\3\40\1\76\27\40\1\u0105\24\40\1\u0105\2\40\16\0"+
    "\1\u0106\62\0\1\u0107\44\0\3\40\1\76\32\40\1\u0108"+
    "\24\40\16\0\1\u0109\44\0\3\40\1\76\35\40\1\u010a"+
    "\24\40\1\76\35\40\1\u010b\24\40\1\76\34\40\1\u010c"+
    "\25\40\1\76\37\40\1\u010d\22\40\1\u010e\62\40\1\u010f"+
    "\57\40\16\0\1\u0110\62\0\1\u0111\44\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11169];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\3\11\2\1\1\11\3\1\2\11"+
    "\3\1\1\11\5\1\4\11\1\1\1\11\21\0\4\11"+
    "\1\0\4\11\2\0\1\11\1\0\1\11\23\0\1\1"+
    "\1\0\1\1\1\0\1\11\1\0\1\11\26\0\1\11"+
    "\1\0\1\11\1\0\1\11\32\0\1\11\6\0\1\1"+
    "\5\0\1\1\4\0\2\1\1\0\1\1\7\0\2\1"+
    "\1\0\1\11\5\0\1\11\1\0\1\1\2\0\2\11"+
    "\1\0\1\11\2\1\5\0\2\11\4\0\2\1\1\0"+
    "\1\11\2\0\1\1\2\11\2\0\1\11\6\0\2\11"+
    "\3\0\1\11\3\0\1\1\3\0\2\1\5\0\1\11"+
    "\1\1\2\0\2\11\1\0\1\1\3\0\1\11\1\0"+
    "\1\1\1\0\1\11\2\1\1\0\1\1\1\11\1\0"+
    "\2\11\1\0\1\11\4\0\2\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer sb = new StringBuffer();
    ArrayList<ErrorP> errors = new ArrayList<ErrorP>();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    private void addError(String message) {
        errors.add(new ErrorP(yyline+1, yycolumn+1, "No se reconoce el simbolo: ", 0, message ));
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addError(yytext());
            }
          // fall through
          case 65: break;
          case 2:
            { /*Ignore*/
            }
          // fall through
          case 66: break;
          case 3:
            { return symbol(ParserSym.DOBLEQUOTE, yytext());
            }
          // fall through
          case 67: break;
          case 4:
            { return symbol(ParserSym.SINGLEQUOTE, yytext());
            }
          // fall through
          case 68: break;
          case 5:
            { return symbol(ParserSym.OPENPARENTHESIS, yytext());
            }
          // fall through
          case 69: break;
          case 6:
            { return symbol(ParserSym.CLOSEPARENTHESIS, yytext());
            }
          // fall through
          case 70: break;
          case 7:
            { return symbol(ParserSym.ASTHERISK, yytext());
            }
          // fall through
          case 71: break;
          case 8:
            { return symbol(ParserSym.PLUS, yytext());
            }
          // fall through
          case 72: break;
          case 9:
            { return symbol(ParserSym.COMMA, yytext());
            }
          // fall through
          case 73: break;
          case 10:
            { return symbol(ParserSym.MINUS, yytext());
            }
          // fall through
          case 74: break;
          case 11:
            { return symbol(ParserSym.DIVIDE, yytext());
            }
          // fall through
          case 75: break;
          case 12:
            { return symbol(ParserSym.NUMBER, yytext());
            }
          // fall through
          case 76: break;
          case 13:
            { return symbol(ParserSym.DOBLEDOT, yytext());
            }
          // fall through
          case 77: break;
          case 14:
            { return symbol(ParserSym.SEMICOLON, yytext());
            }
          // fall through
          case 78: break;
          case 15:
            { return symbol(ParserSym.LESS, yytext());
            }
          // fall through
          case 79: break;
          case 16:
            { return symbol(ParserSym.ASSIGN, yytext());
            }
          // fall through
          case 80: break;
          case 17:
            { return symbol(ParserSym.GREATER, yytext());
            }
          // fall through
          case 81: break;
          case 18:
            { return symbol(ParserSym.LETTER, yytext());
            }
          // fall through
          case 82: break;
          case 19:
            { return symbol(ParserSym.OPENBRACE, yytext());
            }
          // fall through
          case 83: break;
          case 20:
            { return symbol(ParserSym.CLOSEBRACE, yytext());
            }
          // fall through
          case 84: break;
          case 21:
            { return symbol(ParserSym.OPENBRACKET, yytext());
            }
          // fall through
          case 85: break;
          case 22:
            { return symbol(ParserSym.CLOSEBRACKET, yytext());
            }
          // fall through
          case 86: break;
          case 23:
            { return symbol(ParserSym.DIFFERENT, yytext());
            }
          // fall through
          case 87: break;
          case 24:
            { return symbol(ParserSym.MUL, yytext());
            }
          // fall through
          case 88: break;
          case 25:
            { return symbol(ParserSym.SUM, yytext());
            }
          // fall through
          case 89: break;
          case 26:
            { return symbol(ParserSym.SUB, yytext());
            }
          // fall through
          case 90: break;
          case 27:
            { return symbol(ParserSym.DIV, yytext());
            }
          // fall through
          case 91: break;
          case 28:
            { return symbol(ParserSym.LESSEQUAL, yytext());
            }
          // fall through
          case 92: break;
          case 29:
            { return symbol(ParserSym.EQUALS, yytext());
            }
          // fall through
          case 93: break;
          case 30:
            { return symbol(ParserSym.GREATEREQUAL, yytext());
            }
          // fall through
          case 94: break;
          case 31:
            { return symbol(ParserSym.DOWHILE, yytext());
            }
          // fall through
          case 95: break;
          case 32:
            { return symbol(ParserSym.IF, yytext());
            }
          // fall through
          case 96: break;
          case 33:
            { return symbol(ParserSym.STRING, yytext());
            }
          // fall through
          case 97: break;
          case 34:
            { return symbol(ParserSym.NUMBSIZE, yytext());
            }
          // fall through
          case 98: break;
          case 35:
            { return symbol(ParserSym.FOR, yytext());
            }
          // fall through
          case 99: break;
          case 36:
            { return symbol(ParserSym.Xaxis, yytext());
            }
          // fall through
          case 100: break;
          case 37:
            { return symbol(ParserSym.Yaxis, yytext());
            }
          // fall through
          case 101: break;
          case 38:
            { return symbol(ParserSym.ELSE, yytext());
            }
          // fall through
          case 102: break;
          case 39:
            { return symbol(ParserSym.WHILE, yytext());
            }
          // fall through
          case 103: break;
          case 40:
            { return symbol(ParserSym.DATA, yytext());
            }
          // fall through
          case 104: break;
          case 41:
            { return symbol(ParserSym.ICON, yytext());
            }
          // fall through
          case 105: break;
          case 42:
            { return symbol(ParserSym.LINK, yytext());
            }
          // fall through
          case 106: break;
          case 43:
            { return symbol(ParserSym.NAME, yytext());
            }
          // fall through
          case 107: break;
          case 44:
            { return symbol(ParserSym.SIZE, yytext());
            }
          // fall through
          case 108: break;
          case 45:
            { return symbol(ParserSym.CHART, yytext());
            }
          // fall through
          case 109: break;
          case 46:
            { return symbol(ParserSym.COLOR, yytext());
            }
          // fall through
          case 110: break;
          case 47:
            { return symbol(ParserSym.LABEL, yytext());
            }
          // fall through
          case 111: break;
          case 48:
            { return symbol(ParserSym.TITTLE, yytext());
            }
          // fall through
          case 112: break;
          case 49:
            { return symbol(ParserSym.VALUE, yytext());
            }
          // fall through
          case 113: break;
          case 50:
            { return symbol(ParserSym.HEXCODE, yytext());
            }
          // fall through
          case 114: break;
          case 51:
            { return symbol(ParserSym.FOOTER, yytext());
            }
          // fall through
          case 115: break;
          case 52:
            { return symbol(ParserSym.HEADER, yytext());
            }
          // fall through
          case 116: break;
          case 53:
            { return symbol(ParserSym.POINTS, yytext());
            }
          // fall through
          case 117: break;
          case 54:
            { return symbol(ParserSym.CATEGORY, yytext());
            }
          // fall through
          case 118: break;
          case 55:
            { return symbol(ParserSym.FONTSIZE, yytext());
            }
          // fall through
          case 119: break;
          case 56:
            { return symbol(ParserSym.KEYWORDS, yytext());
            }
          // fall through
          case 120: break;
          case 57:
            { return symbol(ParserSym.COPYRIGHT, yytext());
            }
          // fall through
          case 121: break;
          case 58:
            { return symbol(ParserSym.LINESTYLE, yytext());
            }
          // fall through
          case 122: break;
          case 59:
            { return symbol(ParserSym.FONTFAMILY, yytext());
            }
          // fall through
          case 123: break;
          case 60:
            { return symbol(ParserSym.XAXISLABEL, yytext());
            }
          // fall through
          case 124: break;
          case 61:
            { return symbol(ParserSym.YAXISLABEL, yytext());
            }
          // fall through
          case 125: break;
          case 62:
            { return symbol(ParserSym.DESCRIPTION, yytext());
            }
          // fall through
          case 126: break;
          case 63:
            { return symbol(ParserSym.LEGENDPOSITION, yytext());
            }
          // fall through
          case 127: break;
          case 64:
            { return symbol(ParserSym.BACKGROUNDCOLOR, yytext());
            }
          // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
