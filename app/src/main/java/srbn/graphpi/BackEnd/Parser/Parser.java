
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 10 06:14:33 CST 2024
//----------------------------------------------------

package srbn.graphpi.BackEnd.Parser;

import java_cup.runtime.*;
import srbn.graphpi.BackEnd.DomainObjs.Errors.*;
import srbn.graphpi.BackEnd.DomainObjs.Graphs.*;
import srbn.graphpi.BackEnd.DomainObjs.Header;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 10 06:14:33 CST 2024
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\006\000\002\011" +
    "\037\000\002\011\002\000\002\021\003\000\002\021\005" +
    "\000\002\012\004\000\002\013\004\000\002\003\011\000" +
    "\002\003\010\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\006\000\002\005\004\000\002\007\006\000\002\007\004" +
    "\000\002\020\012\000\002\020\020\000\002\020\017\000" +
    "\002\020\025\000\002\016\010\000\002\016\013\000\002" +
    "\016\013\000\002\016\016\000\002\006\006\000\002\006" +
    "\004\000\002\017\010\000\002\017\013\000\002\017\013" +
    "\000\002\017\016\000\002\010\006\000\002\010\004\000" +
    "\002\015\010\000\002\015\016\000\002\015\013\000\002" +
    "\015\021\000\002\014\010\000\002\014\013\000\002\014" +
    "\013\000\002\014\016\000\002\022\015\000\002\023\012" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\046\004\001\002\000\006\007\007\046" +
    "\ufffe\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\100\276\001\002\000\004\046\012\001" +
    "\002\000\006\046\267\047\270\001\002\000\004\004\013" +
    "\001\002\000\004\050\014\001\002\000\004\046\015\001" +
    "\002\000\014\003\026\005\020\006\033\012\022\014\025" +
    "\001\002\000\006\043\240\051\241\001\002\000\004\047" +
    "\ufff4\001\002\000\004\100\227\001\002\000\004\047\226" +
    "\001\002\000\004\100\215\001\002\000\004\047\ufff5\001" +
    "\002\000\006\043\173\051\174\001\002\000\004\076\157" +
    "\001\002\000\004\047\ufff3\001\002\000\004\047\ufff6\001" +
    "\002\000\006\047\132\051\131\001\002\000\006\043\077" +
    "\051\100\001\002\000\004\047\ufff7\001\002\000\004\100" +
    "\034\001\002\000\004\043\035\001\002\000\004\010\036" +
    "\001\002\000\004\050\037\001\002\000\004\046\040\001" +
    "\002\000\004\014\041\001\002\000\004\076\066\001\002" +
    "\000\006\043\043\051\044\001\002\000\004\046\053\001" +
    "\002\000\010\043\045\047\uffee\051\uffee\001\002\000\004" +
    "\013\046\001\002\000\004\101\047\001\002\000\004\043" +
    "\050\001\002\000\004\025\051\001\002\000\004\100\052" +
    "\001\002\000\006\047\uffed\051\uffed\001\002\000\004\014" +
    "\054\001\002\000\004\076\055\001\002\000\004\043\056" +
    "\001\002\000\004\015\057\001\002\000\004\076\060\001" +
    "\002\000\006\043\061\047\062\001\002\000\004\012\063" +
    "\001\002\000\006\043\uffe8\051\uffe8\001\002\000\004\100" +
    "\064\001\002\000\004\047\065\001\002\000\006\043\uffe7" +
    "\051\uffe7\001\002\000\004\043\067\001\002\000\004\015" +
    "\070\001\002\000\004\076\071\001\002\000\006\043\072" +
    "\047\073\001\002\000\004\012\074\001\002\000\006\043" +
    "\uffea\051\uffea\001\002\000\004\100\075\001\002\000\004" +
    "\047\076\001\002\000\006\043\uffe9\051\uffe9\001\002\000" +
    "\004\046\116\001\002\000\006\043\101\047\ufff1\001\002" +
    "\000\004\026\102\001\002\000\004\046\104\001\002\000" +
    "\004\047\ufff2\001\002\000\004\007\105\001\002\000\004" +
    "\100\106\001\002\000\004\043\107\001\002\000\004\017" +
    "\110\001\002\000\004\100\111\001\002\000\004\043\112" +
    "\001\002\000\004\020\113\001\002\000\004\100\114\001" +
    "\002\000\004\047\115\001\002\000\004\047\uffd6\001\002" +
    "\000\004\005\117\001\002\000\004\100\120\001\002\000" +
    "\004\043\121\001\002\000\004\011\122\001\002\000\004" +
    "\076\123\001\002\000\006\043\124\047\125\001\002\000" +
    "\004\013\126\001\002\000\006\043\uffd8\051\uffd8\001\002" +
    "\000\004\101\127\001\002\000\004\047\130\001\002\000" +
    "\006\043\uffd7\051\uffd7\001\002\000\006\043\155\047\uffef" +
    "\001\002\000\004\043\133\001\002\000\004\046\134\001" +
    "\002\000\004\006\135\001\002\000\004\100\136\001\002" +
    "\000\004\043\137\001\002\000\004\010\140\001\002\000" +
    "\004\050\141\001\002\000\004\046\142\001\002\000\004" +
    "\014\041\001\002\000\006\043\043\051\144\001\002\000" +
    "\006\043\145\047\146\001\002\000\004\013\147\001\002" +
    "\000\006\047\uffec\051\uffec\001\002\000\004\101\150\001" +
    "\002\000\004\043\151\001\002\000\004\025\152\001\002" +
    "\000\004\100\153\001\002\000\004\047\154\001\002\000" +
    "\006\047\uffeb\051\uffeb\001\002\000\004\026\102\001\002" +
    "\000\004\047\ufff0\001\002\000\004\043\160\001\002\000" +
    "\004\015\161\001\002\000\004\076\162\001\002\000\006" +
    "\043\163\047\164\001\002\000\004\021\165\001\002\000" +
    "\006\043\uffde\051\uffde\001\002\000\004\076\166\001\002" +
    "\000\004\043\167\001\002\000\004\013\170\001\002\000" +
    "\004\101\171\001\002\000\004\047\172\001\002\000\006" +
    "\043\uffdd\051\uffdd\001\002\000\004\046\177\001\002\000" +
    "\006\043\175\047\uffdf\001\002\000\004\026\102\001\002" +
    "\000\004\047\uffe0\001\002\000\004\014\200\001\002\000" +
    "\004\076\201\001\002\000\004\043\202\001\002\000\004" +
    "\015\203\001\002\000\004\076\204\001\002\000\006\043" +
    "\205\047\206\001\002\000\004\021\207\001\002\000\006" +
    "\043\uffdc\051\uffdc\001\002\000\004\076\210\001\002\000" +
    "\004\043\211\001\002\000\004\013\212\001\002\000\004" +
    "\101\213\001\002\000\004\047\214\001\002\000\006\043" +
    "\uffdb\051\uffdb\001\002\000\004\043\216\001\002\000\004" +
    "\011\217\001\002\000\004\076\220\001\002\000\006\043" +
    "\221\047\222\001\002\000\004\013\223\001\002\000\006" +
    "\043\uffe4\051\uffe4\001\002\000\004\101\224\001\002\000" +
    "\004\047\225\001\002\000\006\043\uffe3\051\uffe3\001\002" +
    "\000\006\046\ufff8\047\ufff8\001\002\000\004\043\230\001" +
    "\002\000\004\011\231\001\002\000\004\076\232\001\002" +
    "\000\006\043\233\047\234\001\002\000\004\013\235\001" +
    "\002\000\006\043\uffda\051\uffda\001\002\000\004\101\236" +
    "\001\002\000\004\047\237\001\002\000\006\043\uffd9\051" +
    "\uffd9\001\002\000\004\046\254\001\002\000\006\043\242" +
    "\047\uffe5\001\002\000\004\026\244\001\002\000\004\047" +
    "\uffe6\001\002\000\004\046\245\001\002\000\004\007\246" +
    "\001\002\000\004\100\247\001\002\000\004\043\250\001" +
    "\002\000\004\016\251\001\002\000\004\100\252\001\002" +
    "\000\004\047\253\001\002\000\004\047\uffd5\001\002\000" +
    "\004\012\255\001\002\000\004\100\256\001\002\000\004" +
    "\043\257\001\002\000\004\011\260\001\002\000\004\076" +
    "\261\001\002\000\006\043\262\047\263\001\002\000\004" +
    "\013\264\001\002\000\006\043\uffe2\051\uffe2\001\002\000" +
    "\004\101\265\001\002\000\004\047\266\001\002\000\006" +
    "\043\uffe1\051\uffe1\001\002\000\004\004\271\001\002\000" +
    "\004\002\000\001\002\000\004\050\272\001\002\000\004" +
    "\046\273\001\002\000\014\003\026\005\020\006\033\012" +
    "\022\014\025\001\002\000\004\047\275\001\002\000\006" +
    "\046\ufff9\047\ufff9\001\002\000\004\043\277\001\002\000" +
    "\004\022\300\001\002\000\004\100\301\001\002\000\004" +
    "\043\302\001\002\000\004\027\303\001\002\000\004\050" +
    "\304\001\002\000\004\100\305\001\002\000\006\043\ufffd" +
    "\051\ufffd\001\002\000\006\043\307\051\310\001\002\000" +
    "\004\100\340\001\002\000\004\043\311\001\002\000\004" +
    "\030\312\001\002\000\004\046\313\001\002\000\004\007" +
    "\314\001\002\000\004\100\337\001\002\000\004\047\316" +
    "\001\002\000\004\043\317\001\002\000\004\031\320\001" +
    "\002\000\004\046\321\001\002\000\004\035\322\001\002" +
    "\000\004\100\336\001\002\000\004\047\324\001\002\000" +
    "\004\043\325\001\002\000\004\032\326\001\002\000\004" +
    "\101\327\001\002\000\004\043\330\001\002\000\004\033" +
    "\331\001\002\000\004\100\332\001\002\000\004\043\333" +
    "\001\002\000\004\034\334\001\002\000\004\100\335\001" +
    "\002\000\004\046\uffff\001\002\000\004\047\ufffa\001\002" +
    "\000\004\047\ufffb\001\002\000\006\043\ufffc\051\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\002\004\001\001\000\004\011\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\020" +
    "\005\031\006\022\007\026\010\016\014\030\015\023\017" +
    "\015\020\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\273\005\031" +
    "\006\022\007\026\010\016\014\030\015\023\017\015\020" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<ErrorP> errors = new ArrayList<>();
    private ArrayList<Graph> graphs = new ArrayList<>();
    private Header header;

    public void syntax_error(Symbol token) {
            if (token.sym != ParserSym.EOF){
            //System.out.println("sintax error: " +token.value + " en la linea " + token.left);
                addError(token, "Sintax error close at: ");
            }
        }

        public void unrecovered_syntax_error(Symbol token) {
            //System.out.println("unrec sintax error: " +token.value + " en la línea " + token.right+" en la columna " + token.left);
            addError(token, "unrec error: ");
        }

        private String removeBrckt(String str){
            return str.replace("[", "").replace("]", "");
        }

        public String removeQuotes(String str){
                return str.replace("\"", "");
            }

        public void addGraph(Graph g){
            graphs.add(g);
        }

        public void addError(Symbol token, String msj) {
            try {
                ArrayList<String> list = new ArrayList<>();
//                for (Integer ex : expected_token_ids()) {
//                    list.add(ParserSym.terminalNames[ex]);
//                }
                errors.add(new ErrorP(token.left, token.right, token.value.toString(), 1, msj, list));
            } catch (Exception e) {

            }
        }

        public ArrayList<ErrorP> getErrors() {
            return errors;
        }

        public ArrayList<Graph> getGraphs() {
            return graphs;
        }

        public Header getHeader() {
            return header;
        }

        public void setHeader(Header header) {
            this.header = header;
        }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pieChart ::= CHART OPENBRACKET TITTLE STRING COMMA LEGENDPOSITION STRING CLOSEBRACKET 
            {
              ChartGraph RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new ChartGraph(parser.removeQuotes(tittle), parser.removeQuotes(pos));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieChart",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // chartGraphs ::= CHART OPENBRACKET TITTLE STRING COMMA XAXISLABEL STRING COMMA YAXISLABEL STRING CLOSEBRACKET 
            {
              ChartGraph RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int xLabelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xLabelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String xLabel = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yLabelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yLabelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String yLabel = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new ChartGraph(parser.removeQuotes(tittle), parser.removeQuotes(xLabel), parser.removeQuotes(yLabel));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chartGraphs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dataDecl ::= dataDecl COMMA OPENBRACKET CATEGORY STRING COMMA VALUE NUMBER COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int barsDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int barsDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ArrayList<DataGraph> barsData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  barsData.add(new DataGraph(parser.removeQuotes(cat), Integer.parseInt(val), col));
                                                                                    RESULT=barsData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dataDecl ::= dataDecl COMMA OPENBRACKET CATEGORY STRING COMMA VALUE NUMBER CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int barsDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int barsDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> barsData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  barsData.add(new DataGraph(parser.removeQuotes(cat), Integer.parseInt(val)));
                                                                                    RESULT=barsData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dataDecl ::= CATEGORY STRING COMMA VALUE NUMBER COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(cat), Integer.parseInt(val), col));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dataDecl ::= CATEGORY STRING COMMA VALUE NUMBER CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(cat), Integer.parseInt(val)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // plotsData ::= plotsData COMMA OPENBRACKET Xaxis NUMBER COMMA Yaxis NUMBER COMMA SIZE NUMBER COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(Integer.parseInt(x), Integer.parseInt(y), Integer.parseInt(s), col));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // plotsData ::= plotsData COMMA OPENBRACKET Xaxis NUMBER COMMA Yaxis NUMBER CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(Integer.parseInt(x), Integer.parseInt(y)));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // plotsData ::= Xaxis NUMBER COMMA Yaxis NUMBER COMMA SIZE NUMBER COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(Integer.parseInt(x), Integer.parseInt(y), Integer.parseInt(s), col));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // plotsData ::= Xaxis NUMBER COMMA Yaxis NUMBER CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(Integer.parseInt(x), Integer.parseInt(y)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // plotGraphDecl ::= plotsData CLOSEBRACE 
            {
              PlotGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new PlotGraph(data);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotGraphDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // plotGraphDecl ::= plotsData CLOSEBRACE COMMA chartGraphs 
            {
              PlotGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new PlotGraph(data, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotGraphDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pieDataDecl ::= pieDataDecl COMMA OPENBRACKET LABEL STRING COMMA VALUE NUMBER COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pieDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int pieDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ArrayList<DataGraph> pieData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  pieData.add(new DataGraph(parser.removeQuotes(label), Integer.parseInt(val), col));
                                                                                    RESULT=pieData;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // pieDataDecl ::= pieDataDecl COMMA OPENBRACKET LABEL STRING COMMA VALUE NUMBER CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pieDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pieDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> pieData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  pieData.add(new DataGraph(parser.removeQuotes(label), Integer.parseInt(val)));
                                                                                    RESULT=pieData;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // pieDataDecl ::= LABEL STRING COMMA VALUE NUMBER COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), Integer.parseInt(val), col));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // pieDataDecl ::= LABEL STRING COMMA VALUE NUMBER CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), Integer.parseInt(val)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // pieGraphDecl ::= pieDataDecl CLOSEBRACE 
            {
              PieGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new PieGraph(data);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieGraphDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pieGraphDecl ::= pieDataDecl CLOSEBRACE COMMA pieChart 
            {
              PieGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new PieGraph(data, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieGraphDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // linePoints ::= linePoints COMMA OPENBRACKET Xaxis NUMBER COMMA Yaxis NUMBER COMMA LABEL STRING CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(Integer.parseInt(x), Integer.parseInt(y), parser.removeQuotes(label)));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // linePoints ::= linePoints COMMA OPENBRACKET Xaxis NUMBER COMMA Yaxis NUMBER CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(Integer.parseInt(x), Integer.parseInt(y)));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // linePoints ::= Xaxis NUMBER COMMA Yaxis NUMBER COMMA LABEL STRING CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(Integer.parseInt(x), Integer.parseInt(y), parser.removeQuotes(label)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // linePoints ::= Xaxis NUMBER COMMA Yaxis NUMBER CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(Integer.parseInt(x), Integer.parseInt(y)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lineDataDecl ::= lineDataDecl CLOSEBRACKET COMMA OPENBRACKET NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE COMMA COLOR HEXCODE COMMA LINESTYLE STRING CLOSEBRACKET 
            {
              ArrayList<LinealData> RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-18)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int styleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String style = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  lineData.add(new LinealData(parser.removeQuotes(name), col, parser.removeQuotes(style), points));
                                                                                    RESULT = lineData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lineDataDecl ::= lineDataDecl CLOSEBRACKET COMMA OPENBRACKET NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE CLOSEBRACKET 
            {
              ArrayList<LinealData> RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  lineData.add(new LinealData(parser.removeQuotes(name), points));
                                                                                    RESULT = lineData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lineDataDecl ::= NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE COMMA COLOR HEXCODE COMMA LINESTYLE STRING 
            {
              ArrayList<LinealData> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int styleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String style = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  ArrayList<LinealData> lineData = new ArrayList<>();
                                                                                    lineData.add(new LinealData(parser.removeQuotes(name), col, parser.removeQuotes(style), points));
                                                                                    RESULT = lineData;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lineDataDecl ::= NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE 
            {
              ArrayList<LinealData> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<LinealData> lineData = new ArrayList<>();
                                                                                    lineData.add(new LinealData(parser.removeQuotes(name), points));
                                                                                    RESULT = lineData;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineGraphDecl ::= lineDataDecl CLOSEBRACE 
            {
              LinealGraph RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinealGraph(lineData);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineGraphDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineGraphDecl ::= lineDataDecl CLOSEBRACE COMMA chartGraphs 
            {
              LinealGraph RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinealGraph(lineData, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineGraphDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // barsGraphDecl ::= dataDecl CLOSEBRACE 
            {
              BarsGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BarsGraph(data);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barsGraphDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // barsGraphDecl ::= dataDecl CLOSEBRACE COMMA chartGraphs 
            {
              BarsGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BarsGraph(data, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barsGraphDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graphTypes ::= error 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graphTypes ::= plotGraphDecl 
            {
              Object RESULT =null;
		int plotGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plotGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlotGraph plotGraph = (PlotGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addGraph(plotGraph);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graphTypes ::= pieGraphDecl 
            {
              Object RESULT =null;
		int pieGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pieGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PieGraph pieGraph = (PieGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addGraph(pieGraph);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graphTypes ::= lineGraphDecl 
            {
              Object RESULT =null;
		int lineGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinealGraph lineGraph = (LinealGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addGraph(lineGraph);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graphTypes ::= barsGraphDecl 
            {
              Object RESULT =null;
		int barsGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int barsGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BarsGraph barsGraph = (BarsGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addGraph(barsGraph);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graphDecl ::= OPENBRACKET DATA OPENBRACE OPENBRACKET graphTypes CLOSEBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // graphDecl ::= graphDecl OPENBRACKET DATA OPENBRACE OPENBRACKET graphTypes CLOSEBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // footerDecl ::= COPYRIGHT STRING 
            {
              String RESULT =null;
		int copyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int copyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String copy = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.removeQuotes(copy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("footerDecl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // headerDecl ::= TITTLE STRING 
            {
              String RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.removeQuotes(tittle);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("headerDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // keywordsDecl ::= keywordsDecl COMMA STRING 
            {
              ArrayList<String> RESULT =null;
		int keysleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int keysright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> keys = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String word = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  keys.add(parser.removeQuotes(word));
                                                                                    keys.addAll(keys);
                                                                                    RESULT = keys;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keywordsDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // keywordsDecl ::= STRING 
            {
              ArrayList<String> RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String word = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  ArrayList<String> keys = new ArrayList<>();
                                                                                    keys.add(parser.removeQuotes(word));
                                                                                    RESULT = keys;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keywordsDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= 
            {
              Header RESULT =null;
		  parser.setHeader(new Header());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TITTLE STRING COMMA DESCRIPTION STRING COMMA KEYWORDS OPENBRACE keywordsDecl CLOSEBRACE COMMA HEADER OPENBRACKET headerDecl CLOSEBRACKET COMMA FOOTER OPENBRACKET footerDecl CLOSEBRACKET COMMA BACKGROUNDCOLOR HEXCODE COMMA FONTFAMILY STRING COMMA FONTSIZE STRING 
            {
              Header RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-27)).value;
		int descleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int descright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int keysleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).left;
		int keysright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).right;
		ArrayList<String> keys = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-20)).value;
		int headerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String header = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int footerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int footerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String footer = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int backleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int backright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String back = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fontleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fontright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String font = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fontSizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fontSizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fontSize = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.setHeader(new Header(tittle, desc, keys, header, footer, back, font, fontSize));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // graphPi ::= OPENBRACKET header graphDecl CLOSEBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPi",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= graphPi EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

