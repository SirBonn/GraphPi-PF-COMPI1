
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 15 00:21:03 CST 2024
//----------------------------------------------------

package srbn.graphpi.BackEnd.Parser;

import java_cup.runtime.*;
import srbn.graphpi.BackEnd.DomainObjs.Errors.*;
import srbn.graphpi.BackEnd.DomainObjs.Graphs.*;
import srbn.graphpi.BackEnd.DomainObjs.SymTable;
import srbn.graphpi.BackEnd.DomainObjs.Sentences.*;
import srbn.graphpi.BackEnd.DomainObjs.Header;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 15 00:21:03 CST 2024
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\006\000\002\002" +
    "\003\000\002\014\037\000\002\014\002\000\002\014\003" +
    "\000\002\037\003\000\002\037\005\000\002\020\004\000" +
    "\002\021\004\000\002\003\003\000\002\003\004\000\002" +
    "\040\013\000\002\040\010\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\007\006\000\002\007\004\000" +
    "\002\012\006\000\002\012\004\000\002\036\012\000\002" +
    "\036\020\000\002\036\017\000\002\036\025\000\002\034" +
    "\010\000\002\034\013\000\002\034\013\000\002\034\016" +
    "\000\002\010\006\000\002\010\004\000\002\035\010\000" +
    "\002\035\013\000\002\035\013\000\002\035\016\000\002" +
    "\013\006\000\002\013\004\000\002\033\010\000\002\033" +
    "\016\000\002\033\013\000\002\033\021\000\002\032\010" +
    "\000\002\032\013\000\002\032\013\000\002\032\016\000" +
    "\002\041\015\000\002\042\012\000\002\011\013\000\002" +
    "\011\024\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\044\017\000\002\044\013" +
    "\000\002\045\024\000\002\022\003\000\002\022\003\000" +
    "\002\046\013\000\002\043\015\000\002\047\002\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\003\000\002\047\003\000\002\017\003\000\002\017\002" +
    "\000\002\016\005\000\002\016\006\000\002\016\005\000" +
    "\002\016\004\000\002\026\004\000\002\026\005\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\030\003\000\002\030\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\016\036\uffbb\040\uffbb\041\uffbb\042\uffbb\050" +
    "\006\105\007\001\002\000\012\002\ufff7\050\uffbb\051\ufff7" +
    "\105\007\001\002\000\012\036\u0120\040\u011b\041\u011a\042" +
    "\u011c\001\002\000\024\003\051\004\050\007\052\036\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\050\ufffd\105\ufffd\001\002\000" +
    "\024\060\023\061\015\062\021\063\017\064\016\065\025" +
    "\066\046\067\030\070\026\001\002\000\020\036\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\050\uffbc\051\uffbc\105\014\001\002" +
    "\000\004\002\013\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\001\001\002\000\024\060\023\061\015\062\021" +
    "\063\017\064\016\065\025\066\027\067\030\070\026\001" +
    "\002\000\006\046\uffa5\100\uffa5\001\002\000\010\046\uffaa" +
    "\055\uffaa\100\uffaa\001\002\000\006\046\uffa3\100\uffa3\001" +
    "\002\000\006\046\uffa2\100\uffa2\001\002\000\006\046\uffa4" +
    "\100\uffa4\001\002\000\006\046\042\100\043\001\002\000" +
    "\006\046\uffa6\100\uffa6\001\002\000\020\036\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\050\uffb8\051\uffb8\105\uffb8\001\002\000" +
    "\010\046\uffa9\055\uffa9\100\uffa9\001\002\000\010\046\uffa7" +
    "\055\uffa7\100\uffa7\001\002\000\012\043\032\044\034\100" +
    "\033\102\031\001\002\000\010\046\uffa8\055\uffa8\100\uffa8" +
    "\001\002\000\004\046\041\001\002\000\004\046\040\001" +
    "\002\000\004\046\037\001\002\000\004\046\036\001\002" +
    "\000\020\036\uffb9\040\uffb9\041\uffb9\042\uffb9\050\uffb9\051" +
    "\uffb9\105\uffb9\001\002\000\020\036\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\050\uffb1\051\uffb1\105\uffb1\001\002\000\020\036" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\050\uffb3\051\uffb3\105\uffb3" +
    "\001\002\000\020\036\uffb2\040\uffb2\041\uffb2\042\uffb2\050" +
    "\uffb2\051\uffb2\105\uffb2\001\002\000\020\036\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\050\uffb4\051\uffb4\105\uffb4\001\002\000" +
    "\020\036\uffb6\040\uffb6\041\uffb6\042\uffb6\050\uffb6\051\uffb6" +
    "\105\uffb6\001\002\000\004\046\044\001\002\000\020\036" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\050\uffb5\051\uffb5\105\uffb5" +
    "\001\002\000\020\036\uffb7\040\uffb7\041\uffb7\042\uffb7\050" +
    "\uffb7\051\uffb7\105\uffb7\001\002\000\012\043\032\044\034" +
    "\100\033\102\031\001\002\000\020\036\uffba\040\uffba\041" +
    "\uffba\042\uffba\050\uffba\051\uffba\105\uffba\001\002\000\004" +
    "\052\122\001\002\000\016\036\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\050\ufffc\105\ufffc\001\002\000\004\102\057\001\002" +
    "\000\016\036\uffbb\040\uffbb\041\uffbb\042\uffbb\050\054\105" +
    "\007\001\002\000\004\004\050\001\002\000\004\051\056" +
    "\001\002\000\004\002\000\001\002\000\004\045\060\001" +
    "\002\000\004\022\061\001\002\000\004\102\062\001\002" +
    "\000\004\045\063\001\002\000\004\027\064\001\002\000" +
    "\004\052\065\001\002\000\004\102\066\001\002\000\006" +
    "\045\ufffb\053\ufffb\001\002\000\006\045\070\053\071\001" +
    "\002\000\004\102\121\001\002\000\004\045\072\001\002" +
    "\000\004\030\073\001\002\000\004\050\074\001\002\000" +
    "\004\007\075\001\002\000\004\102\120\001\002\000\004" +
    "\051\077\001\002\000\004\045\100\001\002\000\004\031" +
    "\101\001\002\000\004\050\102\001\002\000\004\035\103" +
    "\001\002\000\004\102\117\001\002\000\004\051\105\001" +
    "\002\000\004\045\106\001\002\000\004\032\107\001\002" +
    "\000\004\103\110\001\002\000\004\045\111\001\002\000" +
    "\004\033\112\001\002\000\004\102\113\001\002\000\004" +
    "\045\114\001\002\000\004\034\115\001\002\000\004\102" +
    "\116\001\002\000\016\036\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\050\ufffe\105\ufffe\001\002\000\004\051\ufff8\001\002\000" +
    "\004\051\ufff9\001\002\000\006\045\ufffa\053\ufffa\001\002" +
    "\000\004\050\123\001\002\000\016\003\136\005\127\006" +
    "\143\011\132\012\131\014\135\001\002\000\006\051\ufff0" +
    "\105\ufff0\001\002\000\006\045\u0103\053\u0104\001\002\000" +
    "\006\051\uffef\105\uffef\001\002\000\004\102\372\001\002" +
    "\000\004\051\371\001\002\000\004\102\360\001\002\000" +
    "\006\100\166\105\167\001\002\000\006\051\ufff1\105\ufff1" +
    "\001\002\000\006\045\314\053\315\001\002\000\006\100" +
    "\166\105\167\001\002\000\006\051\uffee\105\uffee\001\002" +
    "\000\006\051\253\053\252\001\002\000\006\051\ufff2\105" +
    "\ufff2\001\002\000\006\051\ufff3\105\ufff3\001\002\000\006" +
    "\045\220\053\221\001\002\000\004\102\144\001\002\000" +
    "\004\045\145\001\002\000\004\010\146\001\002\000\004" +
    "\052\147\001\002\000\004\050\150\001\002\000\004\014" +
    "\151\001\002\000\006\100\166\105\167\001\002\000\006" +
    "\045\153\053\154\001\002\000\004\050\163\001\002\000" +
    "\010\045\155\051\uffe9\053\uffe9\001\002\000\004\013\156" +
    "\001\002\000\004\103\157\001\002\000\004\045\160\001" +
    "\002\000\004\025\161\001\002\000\004\102\162\001\002" +
    "\000\006\051\uffe8\053\uffe8\001\002\000\004\014\164\001" +
    "\002\000\006\100\166\105\167\001\002\000\006\045\uffaf" +
    "\051\uffaf\001\002\000\010\045\uffb0\051\uffb0\062\204\001" +
    "\002\000\004\062\201\001\002\000\004\045\171\001\002" +
    "\000\004\015\172\001\002\000\006\100\166\105\167\001" +
    "\002\000\006\045\174\051\175\001\002\000\004\012\176" +
    "\001\002\000\006\045\uffe3\053\uffe3\001\002\000\004\102" +
    "\177\001\002\000\004\051\200\001\002\000\006\045\uffe2" +
    "\053\uffe2\001\002\000\006\100\202\105\203\001\002\000" +
    "\006\045\uffac\051\uffac\001\002\000\006\045\uffab\051\uffab" +
    "\001\002\000\006\100\205\105\206\001\002\000\006\045" +
    "\uffae\051\uffae\001\002\000\006\045\uffad\051\uffad\001\002" +
    "\000\004\045\210\001\002\000\004\015\211\001\002\000" +
    "\006\100\166\105\167\001\002\000\006\045\213\051\214" +
    "\001\002\000\004\012\215\001\002\000\006\045\uffe5\053" +
    "\uffe5\001\002\000\004\102\216\001\002\000\004\051\217" +
    "\001\002\000\006\045\uffe4\053\uffe4\001\002\000\004\050" +
    "\237\001\002\000\010\045\222\051\uffec\105\uffec\001\002" +
    "\000\004\026\223\001\002\000\004\050\225\001\002\000" +
    "\006\051\uffed\105\uffed\001\002\000\004\007\226\001\002" +
    "\000\004\102\227\001\002\000\004\045\230\001\002\000" +
    "\004\017\231\001\002\000\004\102\232\001\002\000\004" +
    "\045\233\001\002\000\004\020\234\001\002\000\004\102" +
    "\235\001\002\000\004\051\236\001\002\000\006\051\uffd1" +
    "\105\uffd1\001\002\000\004\005\240\001\002\000\004\102" +
    "\241\001\002\000\004\045\242\001\002\000\004\011\243" +
    "\001\002\000\006\100\166\105\167\001\002\000\006\045" +
    "\245\051\246\001\002\000\004\013\247\001\002\000\006" +
    "\045\uffd3\053\uffd3\001\002\000\004\103\250\001\002\000" +
    "\004\051\251\001\002\000\006\045\uffd2\053\uffd2\001\002" +
    "\000\010\045\276\051\uffea\105\uffea\001\002\000\004\045" +
    "\254\001\002\000\004\050\255\001\002\000\004\006\256" +
    "\001\002\000\004\102\257\001\002\000\004\045\260\001" +
    "\002\000\004\010\261\001\002\000\004\052\262\001\002" +
    "\000\004\050\263\001\002\000\004\014\151\001\002\000" +
    "\006\045\153\053\265\001\002\000\006\045\266\051\267" +
    "\001\002\000\004\013\270\001\002\000\006\051\uffe7\053" +
    "\uffe7\001\002\000\004\103\271\001\002\000\004\045\272" +
    "\001\002\000\004\025\273\001\002\000\004\102\274\001" +
    "\002\000\004\051\275\001\002\000\006\051\uffe6\053\uffe6" +
    "\001\002\000\004\026\223\001\002\000\006\051\uffeb\105" +
    "\uffeb\001\002\000\004\045\301\001\002\000\004\015\302" +
    "\001\002\000\006\100\166\105\167\001\002\000\006\045" +
    "\304\051\305\001\002\000\004\021\306\001\002\000\006" +
    "\045\uffd9\053\uffd9\001\002\000\004\100\307\001\002\000" +
    "\004\045\310\001\002\000\004\013\311\001\002\000\004" +
    "\103\312\001\002\000\004\051\313\001\002\000\006\045" +
    "\uffd8\053\uffd8\001\002\000\004\050\320\001\002\000\010" +
    "\045\316\051\uffda\105\uffda\001\002\000\004\026\223\001" +
    "\002\000\006\051\uffdb\105\uffdb\001\002\000\004\014\321" +
    "\001\002\000\006\100\166\105\167\001\002\000\004\045" +
    "\323\001\002\000\004\015\324\001\002\000\006\100\166" +
    "\105\167\001\002\000\006\045\326\051\327\001\002\000" +
    "\004\021\330\001\002\000\006\045\uffd7\053\uffd7\001\002" +
    "\000\004\100\331\001\002\000\004\045\332\001\002\000" +
    "\004\013\333\001\002\000\004\103\334\001\002\000\004" +
    "\051\335\001\002\000\006\045\uffd6\053\uffd6\001\002\000" +
    "\004\045\337\001\002\000\004\012\340\001\002\000\004" +
    "\102\341\001\002\000\004\045\342\001\002\000\004\022" +
    "\343\001\002\000\004\102\344\001\002\000\006\045\345" +
    "\051\346\001\002\000\004\023\347\001\002\000\006\051" +
    "\uffcf\105\uffcf\001\002\000\004\102\350\001\002\000\004" +
    "\045\351\001\002\000\004\013\352\001\002\000\004\103" +
    "\353\001\002\000\004\045\354\001\002\000\004\024\355" +
    "\001\002\000\004\102\356\001\002\000\004\051\357\001" +
    "\002\000\006\051\uffce\105\uffce\001\002\000\004\045\361" +
    "\001\002\000\004\011\362\001\002\000\006\100\166\105" +
    "\167\001\002\000\006\045\364\051\365\001\002\000\004" +
    "\013\366\001\002\000\006\045\uffdf\053\uffdf\001\002\000" +
    "\004\103\367\001\002\000\004\051\370\001\002\000\006" +
    "\045\uffde\053\uffde\001\002\000\012\002\ufff4\050\ufff4\051" +
    "\ufff4\105\ufff4\001\002\000\004\045\373\001\002\000\004" +
    "\011\374\001\002\000\006\100\166\105\167\001\002\000" +
    "\006\045\376\051\377\001\002\000\004\013\u0100\001\002" +
    "\000\006\045\uffd5\053\uffd5\001\002\000\004\103\u0101\001" +
    "\002\000\004\051\u0102\001\002\000\006\045\uffd4\053\uffd4" +
    "\001\002\000\004\050\u010f\001\002\000\010\045\u0105\051" +
    "\uffe0\105\uffe0\001\002\000\004\026\u0107\001\002\000\006" +
    "\051\uffe1\105\uffe1\001\002\000\004\050\u0108\001\002\000" +
    "\004\007\u0109\001\002\000\004\102\u010a\001\002\000\004" +
    "\045\u010b\001\002\000\004\016\u010c\001\002\000\004\102" +
    "\u010d\001\002\000\004\051\u010e\001\002\000\006\051\uffd0" +
    "\105\uffd0\001\002\000\004\012\u0110\001\002\000\004\102" +
    "\u0111\001\002\000\004\045\u0112\001\002\000\004\011\u0113" +
    "\001\002\000\006\100\166\105\167\001\002\000\006\045" +
    "\u0115\051\u0116\001\002\000\004\013\u0117\001\002\000\006" +
    "\045\uffdd\053\uffdd\001\002\000\004\103\u0118\001\002\000" +
    "\004\051\u0119\001\002\000\006\045\uffdc\053\uffdc\001\002" +
    "\000\004\054\u0165\001\002\000\004\054\u0152\001\002\000" +
    "\004\050\u0148\001\002\000\006\002\uffcc\051\uffcc\001\002" +
    "\000\006\002\uffcd\051\uffcd\001\002\000\006\002\uffcb\051" +
    "\uffcb\001\002\000\004\054\u0123\001\002\000\006\002\uffca" +
    "\051\uffca\001\002\000\006\002\ufff6\051\ufff6\001\002\000" +
    "\016\043\u0126\044\u0129\055\uffc2\100\u0127\102\u0125\105\u0128" +
    "\001\002\000\004\055\u0136\001\002\000\016\071\u012c\072" +
    "\u012e\073\u012a\074\u012f\075\u012d\076\u012b\001\002\000\004" +
    "\055\uffbe\001\002\000\016\071\u012c\072\u012e\073\u012a\074" +
    "\u012f\075\u012d\076\u012b\001\002\000\016\071\u012c\072\u012e" +
    "\073\u012a\074\u012f\075\u012d\076\u012b\001\002\000\004\055" +
    "\uffbd\001\002\000\010\100\uff9f\102\uff9f\105\uff9f\001\002" +
    "\000\010\100\uff9c\102\uff9c\105\uff9c\001\002\000\010\100" +
    "\uffa1\102\uffa1\105\uffa1\001\002\000\010\100\uff9d\102\uff9d" +
    "\105\uff9d\001\002\000\010\100\uffa0\102\uffa0\105\uffa0\001" +
    "\002\000\010\100\uff9e\102\uff9e\105\uff9e\001\002\000\004" +
    "\100\u0131\001\002\000\004\055\uffbf\001\002\000\004\100" +
    "\u0133\001\002\000\004\055\uffc1\001\002\000\004\102\u0135" +
    "\001\002\000\004\055\uffc0\001\002\000\004\050\u0137\001" +
    "\002\000\006\050\uffbb\105\007\001\002\000\004\050\054" +
    "\001\002\000\010\050\uffbb\051\uffbb\105\007\001\002\000" +
    "\006\050\u013b\051\u013c\001\002\000\004\004\u0142\001\002" +
    "\000\010\002\uffc8\037\u013d\051\uffc8\001\002\000\004\050" +
    "\u013e\001\002\000\004\050\054\001\002\000\010\050\uffbb" +
    "\051\u0141\105\007\001\002\000\004\050\u013b\001\002\000" +
    "\006\002\uffc9\051\uffc9\001\002\000\004\052\u0143\001\002" +
    "\000\004\050\u0144\001\002\000\016\003\136\005\127\006" +
    "\143\011\132\012\131\014\135\001\002\000\006\051\uffbb" +
    "\105\007\001\002\000\004\051\u0147\001\002\000\012\002" +
    "\ufff5\050\ufff5\051\ufff5\105\ufff5\001\002\000\006\050\uffbb" +
    "\105\007\001\002\000\004\050\054\001\002\000\010\050" +
    "\uffbb\051\uffbb\105\007\001\002\000\006\050\u013b\051\u014c" +
    "\001\002\000\004\041\u014d\001\002\000\004\054\u014e\001" +
    "\002\000\016\043\u0126\044\u0129\055\uffc2\100\u0127\102\u0125" +
    "\105\u0128\001\002\000\004\055\u0150\001\002\000\004\046" +
    "\u0151\001\002\000\006\002\uffc3\051\uffc3\001\002\000\004" +
    "\105\u0153\001\002\000\004\066\u0154\001\002\000\004\100" +
    "\u0155\001\002\000\004\046\u0156\001\002\000\004\105\u0157" +
    "\001\002\000\016\071\u012c\072\u012e\073\u012a\074\u012f\075" +
    "\u012d\076\u012b\001\002\000\006\100\u015a\105\u015b\001\002" +
    "\000\004\046\u015c\001\002\000\004\046\uffc6\001\002\000" +
    "\004\046\uffc5\001\002\000\004\105\u015d\001\002\000\012" +
    "\064\016\065\025\067\030\070\026\001\002\000\004\055" +
    "\u015f\001\002\000\004\050\u0160\001\002\000\006\050\uffbb" +
    "\105\007\001\002\000\004\050\054\001\002\000\010\050" +
    "\uffbb\051\uffbb\105\007\001\002\000\006\050\u013b\051\u0164" +
    "\001\002\000\006\002\uffc7\051\uffc7\001\002\000\016\043" +
    "\u0126\044\u0129\055\uffc2\100\u0127\102\u0125\105\u0128\001\002" +
    "\000\004\055\u0167\001\002\000\004\050\u0168\001\002\000" +
    "\006\050\uffbb\105\007\001\002\000\004\050\054\001\002" +
    "\000\010\050\uffbb\051\uffbb\105\007\001\002\000\006\050" +
    "\u013b\051\u016c\001\002\000\006\002\uffc4\051\uffc4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\014\002\010\003\011\016\007\017\004\040" +
    "\003\001\001\000\006\016\007\017\u013f\001\001\000\014" +
    "\004\u0121\043\u0120\044\u011d\045\u011e\046\u011c\001\001\000" +
    "\004\014\052\001\001\000\010\024\017\026\044\027\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\017\026\023\027\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\054" +
    "\016\007\017\004\040\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\007\140\010\132\011\125\012\137\013\123" +
    "\015\127\032\141\033\133\035\124\036\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\335\031\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\277\031\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\151" +
    "\001\001\000\006\030\206\031\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\167\031\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\172\031\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\211\031\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\243\031\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\302\031\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\321\031" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\324\031\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\362\031\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\374\031\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\u0113\031\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u0123\001\001" +
    "\000\002\001\001\000\004\023\u0133\001\001\000\002\001" +
    "\001\000\004\023\u0131\001\001\000\004\023\u012f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\007\017\u0137\001\001\000" +
    "\004\040\u0138\001\001\000\006\016\007\017\u0139\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u013e\001\001\000\006\016\007" +
    "\017\u013f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\140\010\132" +
    "\011\125\012\137\013\123\015\u0144\032\141\033\133\035" +
    "\124\036\136\001\001\000\006\016\007\017\u0145\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\007\017" +
    "\u0148\001\001\000\004\040\u0149\001\001\000\006\016\007" +
    "\017\u014a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u014e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0157\001\001\000\004\022\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\u015d\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\007\017\u0160\001\001" +
    "\000\004\040\u0161\001\001\000\006\016\007\017\u0162\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\u0165" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\007\017\u0168\001\001\000\004\040\u0169\001\001\000\006" +
    "\016\007\017\u016a\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<ErrorP> errors = new ArrayList<>();
    private ArrayList<Graph> allGraps = new ArrayList<>();
    private ArrayList<Sentence> sentences = new ArrayList<>();
    private SymTable symTable = new SymTable();
    private Header header = new Header();

    public void syntax_error(Symbol token) {
            if (token.sym != ParserSym.EOF){
            //System.out.println("sintax error: " +token.value + " en la linea " + token.left);
                addError(token, "Sintax error close at: ");
            }
        }

        public void unrecovered_syntax_error(Symbol token) {
            //System.out.println("unrec sintax error: " +token.value + " en la línea " + token.right+" en la columna " + token.left);
            addError(token, "unrec error: ");
        }

        private String removeBrckt(String str){
            return str.replace("[", "").replace("]", "");
        }

        public String removeQuotes(String str){
                return str.replace("\"", "");
            }

        public void addGraphs(ArrayList<Graph> gr){
            for(Graph g : gr){
                allGraps.add(g);
            }
        }

        public void addSym(String id, Object val){
            if(!symTable.containsVar(id)){
                symTable.addVar(id, val);
            }else {
                addError(new Symbol(0, 0, 0), "Error: " + id + " is already declared");
            }
        }

        public void addSentence(Sentence s){
            sentences.add(s);
        }

        public void addError(Symbol token, String msj) {
            try {
                ArrayList<String> list = new ArrayList<>();
//                for (Integer ex : expected_token_ids()) {
//                    list.add(ParserSym.terminalNames[ex]);
//                }
                errors.add(new ErrorP(token.left, token.right, token.value.toString(), 1, msj, list));
            } catch (Exception e) {

            }
        }

        public int getIntValue(String id){
            if(symTable.getVar(id) instanceof Integer){
                return (int)symTable.getVar(id);
            }else{
                addError(new Symbol(0, 0, 0), "Error: " + id + " is not a number");
                return 0;
            }
        }

        public String getStringValue(String id){
            if(symTable.getVar(id) instanceof String){
                return (String)symTable.getVar(id);
            }else{
                addError(new Symbol(0, 0, 0), "Error: " + id + " is not a string");
                return "";
            }
        }

        public ArrayList<ErrorP> getErrors() {
            return errors;
        }

        public ArrayList<Graph> getGraphs() {
            return allGraps;
        }

        public Header getHeader() {
            return header;
        }

        public void setHeader(Header header) {
            this.header = header;
        }

        public SymTable getSymTable() {
            return symTable;
        }

        public ArrayList<Sentence> getSentences() {
            return sentences;
        }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // logicalOperators ::= LESSEQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // logicalOperators ::= GREATEREQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // logicalOperators ::= LESS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // logicalOperators ::= GREATER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // logicalOperators ::= DIFFERENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // logicalOperators ::= EQUALS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // mathOperators ::= passOperators 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = p.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathOperators",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // mathOperators ::= DIVIDE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = p.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathOperators",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // mathOperators ::= ASTHERISK 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = p.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathOperators",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // mathOperators ::= MINUS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = p.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathOperators",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // mathOperators ::= PLUS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = p.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathOperators",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // passOperators ::= DIV 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("passOperators",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // passOperators ::= MUL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("passOperators",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // passOperators ::= SUB 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("passOperators",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // passOperators ::= SUM 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("passOperators",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // multiplyData ::= IDENTIFIER ASTHERISK IDENTIFIER 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.getIntValue(id) * parser.getIntValue(id2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplyData",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // multiplyData ::= IDENTIFIER ASTHERISK NUMBER 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.getIntValue(id) * Integer.parseInt(num);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplyData",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // multiplyData ::= NUMBER ASTHERISK IDENTIFIER 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Integer.parseInt(num) * parser.getIntValue(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplyData",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // multiplyData ::= NUMBER ASTHERISK NUMBER 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Integer.parseInt(num) * Integer.parseInt(num2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplyData",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dataValue ::= multiplyData 
            {
              Integer RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer mul = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = mul;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataValue",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dataValue ::= NUMBER 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Integer.parseInt(num);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataValue",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // varDecl ::= FALSE SEMICOLON 
            {
              String RESULT =null;
		  RESULT = "false";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // varDecl ::= TRUE SEMICOLON 
            {
              String RESULT =null;
		  RESULT = "true";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // varDecl ::= NUMBER SEMICOLON 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // varDecl ::= STRING SEMICOLON 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // varAssign ::= mathOperators NUMBER SEMICOLON 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT =val+val1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAssign",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // varAssign ::= mathOperators SEMICOLON 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAssign",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // vars ::= IDENTIFIER varAssign 
            {
              SymTable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  SymTable st = new SymTable();
                                                                                    st.addVar(parser.removeQuotes(id), val);
                                                                                    RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // vars ::= vars IDENTIFIER varAssign 
            {
              SymTable RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTable st = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  st.addVar(parser.removeQuotes(id), val);
                                                                                    RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // vars ::= vars IDENTIFIER ASSIGN varDecl 
            {
              SymTable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSym(parser.removeQuotes(id), val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // vars ::= IDENTIFIER ASSIGN varDecl 
            {
              SymTable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSym(parser.removeQuotes(id), val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // vls ::= 
            {
              SymTable RESULT =null;
		  RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // vls ::= vars 
            {
              SymTable RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymTable st = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = st;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conditionalDecl ::= FALSE 
            {
              Conditional RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conditionalDecl ::= TRUE 
            {
              Conditional RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // conditionalDecl ::= IDENTIFIER logicalOperators NUMBER 
            {
              Conditional RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Conditional(id, op.toString(), num, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // conditionalDecl ::= STRING logicalOperators STRING 
            {
              Conditional RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int str2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int str2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Conditional(parser.removeQuotes(str), op.toString(), parser.removeQuotes(str2), false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // conditionalDecl ::= NUMBER logicalOperators NUMBER 
            {
              Conditional RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Conditional(num, op.toString(), num2, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conditionalDecl ::= 
            {
              Conditional RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // doWhileDecl ::= DOWHILE OPENBRACKET vls graphDecl vls CLOSEBRACKET WHILE OPENPARENTHESIS conditionalDecl CLOSEPARENTHESIS SEMICOLON 
            {
              DoSentence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymTable s = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArrayList<Graph> gr = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymTable s2 = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Conditional cond = (Conditional)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DoSentence(gr, cond, s, s2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doWhileDecl",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // whileDecl ::= WHILE OPENPARENTHESIS conditionalDecl CLOSEPARENTHESIS OPENBRACKET vls graphDecl vls CLOSEBRACKET 
            {
              WhileSentence RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Conditional cond = (Conditional)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymTable s = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Graph> gr = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTable s2 = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new WhileSentence(gr, cond, s, s2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileDecl",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // forCondition ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forCondition",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // forCondition ::= NUMBER 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = num;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forCondition",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // forDecl ::= FOR OPENPARENTHESIS IDENTIFIER ASSIGN NUMBER SEMICOLON IDENTIFIER logicalOperators forCondition SEMICOLON IDENTIFIER passOperators CLOSEPARENTHESIS OPENBRACKET vls graphDecl vls CLOSEBRACKET 
            {
              ForSentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int logOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int logOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String logOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int fcondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int fcondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String fcond = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int passOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int passOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String passOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Graph> gr = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  parser.addSym(parser.removeQuotes(id), num);
                                                                                    RESULT = new ForSentence(gr, id, Integer.parseInt(num), logOp, fcond, passOp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forDecl",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ifDecl ::= IF OPENPARENTHESIS conditionalDecl CLOSEPARENTHESIS OPENBRACKET vls graphDecl vls CLOSEBRACKET 
            {
              IfElSentence RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Conditional cond = (Conditional)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Graph> gr = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new IfElSentence(gr, cond); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifDecl",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ifDecl ::= IF OPENPARENTHESIS conditionalDecl CLOSEPARENTHESIS OPENBRACKET vls graphDecl vls CLOSEBRACKET ELSE OPENBRACKET graphDecl CLOSEBRACKET 
            {
              IfElSentence RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Conditional cond = (Conditional)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList<Graph> gr = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int gr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Graph> gr2 = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfElSentence(gr, gr2, cond); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifDecl",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencesDecl ::= doWhileDecl 
            {
              Object RESULT =null;
		int dowhileSentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dowhileSentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DoSentence dowhileSent = (DoSentence)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSentence(dowhileSent);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencesDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencesDecl ::= forDecl 
            {
              Object RESULT =null;
		int forSentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int forSentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForSentence forSent = (ForSentence)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSentence(forSent);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencesDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencesDecl ::= whileDecl 
            {
              Object RESULT =null;
		int whileSentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileSentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileSentence whileSent = (WhileSentence)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSentence(whileSent);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencesDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencesDecl ::= ifDecl 
            {
              Object RESULT =null;
		int ifSentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifSentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfElSentence ifSent = (IfElSentence)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSentence(ifSent);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencesDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // infoCard ::= VALUE dataValue COMMA LABEL STRING COMMA DESCRIPTION STRING COMMA ICON STRING COMMA COLOR HEXCODE COMMA LINK STRING CLOSEBRACKET 
            {
              PieGraph RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int descleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int descright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int iconleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iconright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String icon = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String link = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val, parser.removeQuotes(col)));
                                                                                    RESULT = new PieGraph(data, parser.removeQuotes(desc), parser.removeQuotes(icon), parser.removeQuotes(link));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infoCard",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // infoCard ::= VALUE dataValue COMMA LABEL STRING COMMA DESCRIPTION STRING CLOSEBRACKET 
            {
              PieGraph RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int descleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int descright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val));
                                                                                    RESULT = new PieGraph(data, parser.removeQuotes(desc));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infoCard",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pieChart ::= CHART OPENBRACKET TITTLE STRING COMMA LEGENDPOSITION STRING CLOSEBRACKET 
            {
              ChartGraph RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new ChartGraph(parser.removeQuotes(tittle), parser.removeQuotes(pos));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieChart",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // chartGraphs ::= CHART OPENBRACKET TITTLE STRING COMMA XAXISLABEL STRING COMMA YAXISLABEL STRING CLOSEBRACKET 
            {
              ChartGraph RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int xLabelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xLabelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String xLabel = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yLabelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yLabelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String yLabel = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new ChartGraph(parser.removeQuotes(tittle), parser.removeQuotes(xLabel), parser.removeQuotes(yLabel));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chartGraphs",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dataDecl ::= dataDecl COMMA OPENBRACKET CATEGORY STRING COMMA VALUE dataValue COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int barsDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int barsDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ArrayList<DataGraph> barsData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  barsData.add(new DataGraph(parser.removeQuotes(cat), val, parser.removeQuotes(col)));
                                                                                    RESULT=barsData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dataDecl ::= dataDecl COMMA OPENBRACKET CATEGORY STRING COMMA VALUE dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int barsDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int barsDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> barsData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  barsData.add(new DataGraph(parser.removeQuotes(cat), val));
                                                                                    RESULT=barsData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dataDecl ::= CATEGORY STRING COMMA VALUE dataValue COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(cat), val, parser.removeQuotes(col)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dataDecl ::= CATEGORY STRING COMMA VALUE dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(cat), val));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // plotsData ::= plotsData COMMA OPENBRACKET Xaxis dataValue COMMA Yaxis dataValue COMMA SIZE NUMBER COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(x, y, Integer.parseInt(s), parser.removeQuotes(col)));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // plotsData ::= plotsData COMMA OPENBRACKET Xaxis dataValue COMMA Yaxis dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(x, y));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // plotsData ::= Xaxis dataValue COMMA Yaxis dataValue COMMA SIZE NUMBER COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y, Integer.parseInt(s), parser.removeQuotes(col)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // plotsData ::= Xaxis dataValue COMMA Yaxis dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // plotGraphDecl ::= plotsData CLOSEBRACE 
            {
              PlotGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new PlotGraph(data);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotGraphDecl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // plotGraphDecl ::= plotsData CLOSEBRACE COMMA chartGraphs 
            {
              PlotGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new PlotGraph(data, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotGraphDecl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pieDataDecl ::= pieDataDecl COMMA OPENBRACKET LABEL STRING COMMA VALUE dataValue COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pieDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int pieDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ArrayList<DataGraph> pieData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  pieData.add(new DataGraph(parser.removeQuotes(label), val, parser.removeQuotes(col)));
                                                                                    RESULT=pieData;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pieDataDecl ::= pieDataDecl COMMA OPENBRACKET LABEL STRING COMMA VALUE dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pieDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pieDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> pieData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  pieData.add(new DataGraph(parser.removeQuotes(label), val));
                                                                                    RESULT=pieData;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pieDataDecl ::= LABEL STRING COMMA VALUE dataValue COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val, parser.removeQuotes(col)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // pieDataDecl ::= LABEL STRING COMMA VALUE dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // pieGraphDecl ::= pieDataDecl CLOSEBRACE 
            {
              PieGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new PieGraph(data);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieGraphDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pieGraphDecl ::= pieDataDecl CLOSEBRACE COMMA pieChart 
            {
              PieGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new PieGraph(data, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieGraphDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // linePoints ::= linePoints COMMA OPENBRACKET Xaxis dataValue COMMA Yaxis dataValue COMMA LABEL STRING CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(x, y, parser.removeQuotes(label)));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // linePoints ::= linePoints COMMA OPENBRACKET Xaxis dataValue COMMA Yaxis dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(x, y));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // linePoints ::= Xaxis dataValue COMMA Yaxis dataValue COMMA LABEL STRING CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y, parser.removeQuotes(label)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // linePoints ::= Xaxis dataValue COMMA Yaxis dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lineDataDecl ::= lineDataDecl CLOSEBRACKET COMMA OPENBRACKET NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE COMMA COLOR HEXCODE COMMA LINESTYLE STRING CLOSEBRACKET 
            {
              ArrayList<LinealData> RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-18)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int styleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String style = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  lineData.add(new LinealData(parser.removeQuotes(name), parser.removeQuotes(col), parser.removeQuotes(style), points));
                                                                                    RESULT = lineData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lineDataDecl ::= lineDataDecl CLOSEBRACKET COMMA OPENBRACKET NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE CLOSEBRACKET 
            {
              ArrayList<LinealData> RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  lineData.add(new LinealData(parser.removeQuotes(name), points));
                                                                                    RESULT = lineData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lineDataDecl ::= NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE COMMA COLOR HEXCODE COMMA LINESTYLE STRING 
            {
              ArrayList<LinealData> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int styleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String style = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  ArrayList<LinealData> lineData = new ArrayList<>();
                                                                                    lineData.add(new LinealData(parser.removeQuotes(name), parser.removeQuotes(col), parser.removeQuotes(style), points));
                                                                                    RESULT = lineData;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lineDataDecl ::= NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE 
            {
              ArrayList<LinealData> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<LinealData> lineData = new ArrayList<>();
                                                                                    lineData.add(new LinealData(parser.removeQuotes(name), points));
                                                                                    RESULT = lineData;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lineGraphDecl ::= lineDataDecl CLOSEBRACE 
            {
              LinealGraph RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinealGraph(lineData);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineGraphDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lineGraphDecl ::= lineDataDecl CLOSEBRACE COMMA chartGraphs 
            {
              LinealGraph RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinealGraph(lineData, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineGraphDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // barsGraphDecl ::= dataDecl CLOSEBRACE 
            {
              BarsGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BarsGraph(data);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barsGraphDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // barsGraphDecl ::= dataDecl CLOSEBRACE COMMA chartGraphs 
            {
              BarsGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BarsGraph(data, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barsGraphDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // graphTypes ::= error 
            {
              Graph RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // graphTypes ::= infoCard 
            {
              Graph RESULT =null;
		int infoCardleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int infoCardright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PieGraph infoCard = (PieGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = infoCard;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // graphTypes ::= plotGraphDecl 
            {
              Graph RESULT =null;
		int plotGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plotGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlotGraph plotGraph = (PlotGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = plotGraph;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // graphTypes ::= pieGraphDecl 
            {
              Graph RESULT =null;
		int pieGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pieGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PieGraph pieGraph = (PieGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pieGraph;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graphTypes ::= lineGraphDecl 
            {
              Graph RESULT =null;
		int lineGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinealGraph lineGraph = (LinealGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lineGraph;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graphTypes ::= barsGraphDecl 
            {
              Graph RESULT =null;
		int barsGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int barsGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BarsGraph barsGraph = (BarsGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=  barsGraph;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graphDecl ::= OPENBRACKET DATA OPENBRACE OPENBRACKET graphTypes CLOSEBRACKET 
            {
              ArrayList<Graph> RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Graph gr = (Graph)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ArrayList<Graph> grs = new ArrayList<Graph>();
                                                                                   grs.add(gr); RESULT = grs;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphDecl",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graphDecl ::= graphDecl vls OPENBRACKET DATA OPENBRACE OPENBRACKET graphTypes vls CLOSEBRACKET 
            {
              ArrayList<Graph> RESULT =null;
		int grsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int grsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<Graph> grs = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Graph gr = (Graph)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 grs.add(gr); RESULT = grs;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphDecl",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // jsonDecl ::= vls sentencesDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsonDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // jsonDecl ::= graphDecl 
            {
              Object RESULT =null;
		int graphsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int graphsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Graph> graphs = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addGraphs(graphs);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsonDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // footerDecl ::= COPYRIGHT STRING 
            {
              String RESULT =null;
		int copyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int copyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String copy = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.removeQuotes(copy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("footerDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // headerDecl ::= TITTLE STRING 
            {
              String RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.removeQuotes(tittle);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("headerDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // keywordsDecl ::= keywordsDecl COMMA STRING 
            {
              ArrayList<String> RESULT =null;
		int keysleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int keysright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> keys = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String word = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  keys.add(parser.removeQuotes(word));
                                                                                    keys.addAll(keys);
                                                                                    RESULT = keys;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keywordsDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // keywordsDecl ::= STRING 
            {
              ArrayList<String> RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String word = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  ArrayList<String> keys = new ArrayList<>();
                                                                                    keys.add(parser.removeQuotes(word));
                                                                                    RESULT = keys;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keywordsDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= error 
            {
              Header RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= 
            {
              Header RESULT =null;
		  parser.setHeader(new Header());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= TITTLE STRING COMMA DESCRIPTION STRING COMMA KEYWORDS OPENBRACE keywordsDecl CLOSEBRACE COMMA HEADER OPENBRACKET headerDecl CLOSEBRACKET COMMA FOOTER OPENBRACKET footerDecl CLOSEBRACKET COMMA BACKGROUNDCOLOR HEXCODE COMMA FONTFAMILY STRING COMMA FONTSIZE STRING 
            {
              Header RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-27)).value;
		int descleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int descright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int keysleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).left;
		int keysright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).right;
		ArrayList<String> keys = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-20)).value;
		int headerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String header = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int footerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int footerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String footer = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int backleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int backright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String back = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fontleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fontright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String font = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fontSizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fontSizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fontSize = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.setHeader(new Header(tittle, desc, keys, header, footer, back, font, fontSize));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // graphPi ::= jsonDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPi",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // graphPi ::= OPENBRACKET header jsonDecl CLOSEBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPi",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= graphPi EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

