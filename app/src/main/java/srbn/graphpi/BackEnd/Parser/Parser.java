
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 15 02:47:26 CST 2024
//----------------------------------------------------

package srbn.graphpi.BackEnd.Parser;

import java_cup.runtime.*;
import srbn.graphpi.BackEnd.DomainObjs.Errors.*;
import srbn.graphpi.BackEnd.DomainObjs.Graphs.*;
import srbn.graphpi.BackEnd.DomainObjs.SymTable;
import srbn.graphpi.BackEnd.DomainObjs.Sentences.*;
import srbn.graphpi.BackEnd.DomainObjs.Header;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 15 02:47:26 CST 2024
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\002\006\000\002\002" +
    "\003\000\002\014\037\000\002\014\002\000\002\043\003" +
    "\000\002\043\005\000\002\020\004\000\002\021\004\000" +
    "\002\003\003\000\002\003\003\000\002\044\013\000\002" +
    "\044\011\000\002\044\003\000\002\044\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\007\006\000" +
    "\002\007\004\000\002\012\006\000\002\012\004\000\002" +
    "\042\012\000\002\042\020\000\002\042\017\000\002\042" +
    "\025\000\002\040\010\000\002\040\013\000\002\040\013" +
    "\000\002\040\016\000\002\010\006\000\002\010\004\000" +
    "\002\041\010\000\002\041\013\000\002\041\013\000\002" +
    "\041\016\000\002\013\006\000\002\013\004\000\002\037" +
    "\010\000\002\037\016\000\002\037\013\000\002\037\021" +
    "\000\002\036\010\000\002\036\013\000\002\036\013\000" +
    "\002\036\016\000\002\045\015\000\002\046\012\000\002" +
    "\011\013\000\002\011\024\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\050\017\000\002\050\013\000\002\051\024\000" +
    "\002\022\003\000\002\022\003\000\002\052\013\000\002" +
    "\047\015\000\002\053\002\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\053\003\000\002\053\003" +
    "\000\002\017\003\000\002\017\002\000\002\016\005\000" +
    "\002\016\006\000\002\016\005\000\002\016\004\000\002" +
    "\026\004\000\002\026\005\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\030" +
    "\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\022\002\uffb9\003\021\036\016\040\010\041" +
    "\005\042\011\050\017\106\022\001\002\000\004\002\uffff" +
    "\001\002\000\004\054\u017e\001\002\000\006\002\ufff7\051" +
    "\ufff7\001\002\000\024\002\ufff8\003\uffb9\036\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\050\uffb9\051\ufff8\106\022\001\002\000" +
    "\004\054\u016b\001\002\000\004\050\u0161\001\002\000\024" +
    "\002\uffcb\003\uffcb\036\uffcb\040\uffcb\041\uffcb\042\uffcb\050" +
    "\uffcb\051\uffcb\106\uffcb\001\002\000\024\002\uffcc\003\uffcc" +
    "\036\uffcc\040\uffcc\041\uffcc\042\uffcc\050\uffcc\051\uffcc\106" +
    "\uffcc\001\002\000\004\002\u0160\001\002\000\024\002\uffca" +
    "\003\uffca\036\uffca\040\uffca\041\uffca\042\uffca\050\uffca\051" +
    "\uffca\106\uffca\001\002\000\004\054\u013a\001\002\000\026" +
    "\003\ufffd\004\063\007\064\036\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\050\ufffd\051\ufffd\106\ufffd\001\002\000\024\002\uffba" +
    "\003\uffba\036\uffba\040\uffba\041\uffba\042\uffba\050\uffba\051" +
    "\uffba\106\057\001\002\000\024\002\uffc8\003\uffc8\036\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\050\uffc8\051\uffc8\106\uffc8\001" +
    "\002\000\024\060\033\061\025\062\030\063\027\064\026" +
    "\065\035\066\037\067\040\070\036\001\002\000\024\002" +
    "\uffc9\003\uffc9\036\uffc9\040\uffc9\041\uffc9\042\uffc9\050\uffc9" +
    "\051\uffc9\106\uffc9\001\002\000\024\002\ufff4\003\ufff4\036" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\050\ufff4\051\ufff4\106\ufff4" +
    "\001\002\000\010\046\uff94\100\uff94\101\uff94\001\002\000" +
    "\012\046\uff99\055\uff99\100\uff99\101\uff99\001\002\000\010" +
    "\046\uff92\100\uff92\101\uff92\001\002\000\010\046\uff93\100" +
    "\uff93\101\uff93\001\002\000\010\046\uff91\100\uff91\101\uff91" +
    "\001\002\000\010\046\054\100\044\101\047\001\002\000" +
    "\010\046\uff95\100\uff95\101\uff95\001\002\000\024\002\uffb5" +
    "\003\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5\050\uffb5\051" +
    "\uffb5\106\uffb5\001\002\000\012\046\uff98\055\uff98\100\uff98" +
    "\101\uff98\001\002\000\012\046\uff96\055\uff96\100\uff96\101" +
    "\uff96\001\002\000\014\043\043\044\045\100\044\101\047" +
    "\103\041\001\002\000\012\046\uff97\055\uff97\100\uff97\101" +
    "\uff97\001\002\000\004\046\053\001\002\000\004\046\052" +
    "\001\002\000\004\046\051\001\002\000\036\045\uff8a\046" +
    "\uff8a\051\uff8a\055\uff8a\060\uff8a\062\uff8a\063\uff8a\065\uff8a" +
    "\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\001" +
    "\002\000\004\046\050\001\002\000\024\002\uffb8\003\uffb8" +
    "\036\uffb8\040\uffb8\041\uffb8\042\uffb8\050\uffb8\051\uffb8\106" +
    "\uffb8\001\002\000\036\045\uff89\046\uff89\051\uff89\055\uff89" +
    "\060\uff89\062\uff89\063\uff89\065\uff89\071\uff89\072\uff89\073" +
    "\uff89\074\uff89\075\uff89\076\uff89\001\002\000\024\002\uffaf" +
    "\003\uffaf\036\uffaf\040\uffaf\041\uffaf\042\uffaf\050\uffaf\051" +
    "\uffaf\106\uffaf\001\002\000\024\002\uffb0\003\uffb0\036\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\050\uffb0\051\uffb0\106\uffb0\001" +
    "\002\000\024\002\uffb1\003\uffb1\036\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\050\uffb1\051\uffb1\106\uffb1\001\002\000\024\002" +
    "\uffb2\003\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\050\uffb2" +
    "\051\uffb2\106\uffb2\001\002\000\024\002\uffb4\003\uffb4\036" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\050\uffb4\051\uffb4\106\uffb4" +
    "\001\002\000\004\046\056\001\002\000\024\002\uffb3\003" +
    "\uffb3\036\uffb3\040\uffb3\041\uffb3\042\uffb3\050\uffb3\051\uffb3" +
    "\106\uffb3\001\002\000\024\060\033\061\025\062\030\063" +
    "\027\064\026\065\035\066\061\067\040\070\036\001\002" +
    "\000\024\002\uffb6\003\uffb6\036\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\050\uffb6\051\uffb6\106\uffb6\001\002\000\014\043\043" +
    "\044\045\100\044\101\047\103\041\001\002\000\024\002" +
    "\uffb7\003\uffb7\036\uffb7\040\uffb7\041\uffb7\042\uffb7\050\uffb7" +
    "\051\uffb7\106\uffb7\001\002\000\004\052\134\001\002\000" +
    "\004\103\071\001\002\000\022\003\021\036\016\040\010" +
    "\041\005\042\011\050\067\051\uffb9\106\022\001\002\000" +
    "\004\051\070\001\002\000\004\004\063\001\002\000\004" +
    "\002\000\001\002\000\004\045\072\001\002\000\004\022" +
    "\073\001\002\000\004\103\074\001\002\000\004\045\075" +
    "\001\002\000\004\027\076\001\002\000\004\052\077\001" +
    "\002\000\004\103\100\001\002\000\006\045\ufffc\053\ufffc" +
    "\001\002\000\006\045\102\053\103\001\002\000\004\103" +
    "\133\001\002\000\004\045\104\001\002\000\004\030\105" +
    "\001\002\000\004\050\106\001\002\000\004\007\107\001" +
    "\002\000\004\103\132\001\002\000\004\051\111\001\002" +
    "\000\004\045\112\001\002\000\004\031\113\001\002\000" +
    "\004\050\114\001\002\000\004\035\115\001\002\000\004" +
    "\103\131\001\002\000\004\051\117\001\002\000\004\045" +
    "\120\001\002\000\004\032\121\001\002\000\004\104\122" +
    "\001\002\000\004\045\123\001\002\000\004\033\124\001" +
    "\002\000\004\103\125\001\002\000\004\045\126\001\002" +
    "\000\004\034\127\001\002\000\004\103\130\001\002\000" +
    "\022\003\ufffe\036\ufffe\040\ufffe\041\ufffe\042\ufffe\050\ufffe" +
    "\051\ufffe\106\ufffe\001\002\000\004\051\ufff9\001\002\000" +
    "\004\051\ufffa\001\002\000\006\045\ufffb\053\ufffb\001\002" +
    "\000\004\050\135\001\002\000\016\003\152\005\141\006" +
    "\155\011\144\012\143\014\147\001\002\000\006\051\uffee" +
    "\106\uffee\001\002\000\006\045\u0123\053\u0124\001\002\000" +
    "\006\051\uffef\106\uffef\001\002\000\004\103\u011a\001\002" +
    "\000\006\051\uffb9\106\022\001\002\000\004\103\u010f\001" +
    "\002\000\010\100\044\101\047\106\203\001\002\000\006" +
    "\051\ufff0\106\ufff0\001\002\000\006\045\353\053\354\001" +
    "\002\000\010\100\044\101\047\106\203\001\002\000\006" +
    "\051\ufff1\106\ufff1\001\002\000\006\051\312\053\311\001" +
    "\002\000\006\051\uffed\106\uffed\001\002\000\006\045\257" +
    "\053\260\001\002\000\006\051\ufff2\106\ufff2\001\002\000" +
    "\004\103\156\001\002\000\004\045\157\001\002\000\004" +
    "\010\160\001\002\000\004\052\161\001\002\000\004\050" +
    "\162\001\002\000\004\014\163\001\002\000\010\100\044" +
    "\101\047\106\203\001\002\000\006\045\165\053\166\001" +
    "\002\000\004\050\175\001\002\000\010\045\167\051\uffe8" +
    "\053\uffe8\001\002\000\004\013\170\001\002\000\004\104" +
    "\171\001\002\000\004\045\172\001\002\000\004\025\173" +
    "\001\002\000\004\103\174\001\002\000\006\051\uffe7\053" +
    "\uffe7\001\002\000\004\014\176\001\002\000\010\100\044" +
    "\101\047\106\203\001\002\000\004\045\236\001\002\000" +
    "\006\045\uffab\051\uffab\001\002\000\006\045\uffac\051\uffac" +
    "\001\002\000\006\045\uffaa\051\uffaa\001\002\000\012\060" +
    "\224\062\223\063\225\065\222\001\002\000\006\045\uffad" +
    "\051\uffad\001\002\000\016\045\uffae\051\uffae\060\210\062" +
    "\207\063\211\065\206\001\002\000\010\100\044\101\047" +
    "\106\221\001\002\000\010\100\044\101\047\106\217\001" +
    "\002\000\010\100\044\101\047\106\215\001\002\000\010" +
    "\100\044\101\047\106\213\001\002\000\006\045\uff9d\051" +
    "\uff9d\001\002\000\006\045\uff9c\051\uff9c\001\002\000\006" +
    "\045\uffa9\051\uffa9\001\002\000\006\045\uffa8\051\uffa8\001" +
    "\002\000\006\045\uffa1\051\uffa1\001\002\000\006\045\uffa0" +
    "\051\uffa0\001\002\000\006\045\uffa5\051\uffa5\001\002\000" +
    "\006\045\uffa4\051\uffa4\001\002\000\010\100\044\101\047" +
    "\106\235\001\002\000\010\100\044\101\047\106\233\001" +
    "\002\000\010\100\044\101\047\106\231\001\002\000\010" +
    "\100\044\101\047\106\227\001\002\000\006\045\uff9b\051" +
    "\uff9b\001\002\000\006\045\uff9a\051\uff9a\001\002\000\006" +
    "\045\uffa7\051\uffa7\001\002\000\006\045\uffa6\051\uffa6\001" +
    "\002\000\006\045\uff9f\051\uff9f\001\002\000\006\045\uff9e" +
    "\051\uff9e\001\002\000\006\045\uffa3\051\uffa3\001\002\000" +
    "\006\045\uffa2\051\uffa2\001\002\000\004\015\237\001\002" +
    "\000\010\100\044\101\047\106\203\001\002\000\006\045" +
    "\241\051\242\001\002\000\004\012\243\001\002\000\006" +
    "\045\uffe2\053\uffe2\001\002\000\004\103\244\001\002\000" +
    "\004\051\245\001\002\000\006\045\uffe1\053\uffe1\001\002" +
    "\000\004\045\247\001\002\000\004\015\250\001\002\000" +
    "\010\100\044\101\047\106\203\001\002\000\006\045\252" +
    "\051\253\001\002\000\004\012\254\001\002\000\006\045" +
    "\uffe4\053\uffe4\001\002\000\004\103\255\001\002\000\004" +
    "\051\256\001\002\000\006\045\uffe3\053\uffe3\001\002\000" +
    "\004\050\276\001\002\000\010\045\261\051\uffeb\106\uffeb" +
    "\001\002\000\004\026\262\001\002\000\004\050\264\001" +
    "\002\000\006\051\uffec\106\uffec\001\002\000\004\007\265" +
    "\001\002\000\004\103\266\001\002\000\004\045\267\001" +
    "\002\000\004\017\270\001\002\000\004\103\271\001\002" +
    "\000\004\045\272\001\002\000\004\020\273\001\002\000" +
    "\004\103\274\001\002\000\004\051\275\001\002\000\006" +
    "\051\uffd0\106\uffd0\001\002\000\004\005\277\001\002\000" +
    "\004\103\300\001\002\000\004\045\301\001\002\000\004" +
    "\011\302\001\002\000\010\100\044\101\047\106\203\001" +
    "\002\000\006\045\304\051\305\001\002\000\004\013\306" +
    "\001\002\000\006\045\uffd2\053\uffd2\001\002\000\004\104" +
    "\307\001\002\000\004\051\310\001\002\000\006\045\uffd1" +
    "\053\uffd1\001\002\000\010\045\335\051\uffe9\106\uffe9\001" +
    "\002\000\004\045\313\001\002\000\004\050\314\001\002" +
    "\000\004\006\315\001\002\000\004\103\316\001\002\000" +
    "\004\045\317\001\002\000\004\010\320\001\002\000\004" +
    "\052\321\001\002\000\004\050\322\001\002\000\004\014" +
    "\163\001\002\000\006\045\165\053\324\001\002\000\006" +
    "\045\325\051\326\001\002\000\004\013\327\001\002\000" +
    "\006\051\uffe6\053\uffe6\001\002\000\004\104\330\001\002" +
    "\000\004\045\331\001\002\000\004\025\332\001\002\000" +
    "\004\103\333\001\002\000\004\051\334\001\002\000\006" +
    "\051\uffe5\053\uffe5\001\002\000\004\026\262\001\002\000" +
    "\006\051\uffea\106\uffea\001\002\000\004\045\340\001\002" +
    "\000\004\015\341\001\002\000\010\100\044\101\047\106" +
    "\203\001\002\000\006\045\343\051\344\001\002\000\004" +
    "\021\345\001\002\000\006\045\uffd8\053\uffd8\001\002\000" +
    "\006\100\044\101\047\001\002\000\004\045\347\001\002" +
    "\000\004\013\350\001\002\000\004\104\351\001\002\000" +
    "\004\051\352\001\002\000\006\045\uffd7\053\uffd7\001\002" +
    "\000\004\050\357\001\002\000\010\045\355\051\uffd9\106" +
    "\uffd9\001\002\000\004\026\262\001\002\000\006\051\uffda" +
    "\106\uffda\001\002\000\004\014\360\001\002\000\010\100" +
    "\044\101\047\106\203\001\002\000\004\045\362\001\002" +
    "\000\004\015\363\001\002\000\010\100\044\101\047\106" +
    "\203\001\002\000\006\045\365\051\366\001\002\000\004" +
    "\021\367\001\002\000\006\045\uffd6\053\uffd6\001\002\000" +
    "\006\100\044\101\047\001\002\000\004\045\371\001\002" +
    "\000\004\013\372\001\002\000\004\104\373\001\002\000" +
    "\004\051\374\001\002\000\006\045\uffd5\053\uffd5\001\002" +
    "\000\004\045\376\001\002\000\004\012\377\001\002\000" +
    "\004\103\u0100\001\002\000\004\045\u0101\001\002\000\004" +
    "\022\u0102\001\002\000\004\103\u0103\001\002\000\006\045" +
    "\u0104\051\u0105\001\002\000\004\023\u0106\001\002\000\006" +
    "\051\uffce\106\uffce\001\002\000\004\103\u0107\001\002\000" +
    "\004\045\u0108\001\002\000\004\013\u0109\001\002\000\004" +
    "\104\u010a\001\002\000\004\045\u010b\001\002\000\004\024" +
    "\u010c\001\002\000\004\103\u010d\001\002\000\004\051\u010e" +
    "\001\002\000\006\051\uffcd\106\uffcd\001\002\000\004\045" +
    "\u0110\001\002\000\004\011\u0111\001\002\000\010\100\044" +
    "\101\047\106\203\001\002\000\006\045\u0113\051\u0114\001" +
    "\002\000\004\013\u0115\001\002\000\006\045\uffde\053\uffde" +
    "\001\002\000\004\104\u0116\001\002\000\004\051\u0117\001" +
    "\002\000\006\045\uffdd\053\uffdd\001\002\000\004\051\u0119" +
    "\001\002\000\024\002\ufff5\003\ufff5\036\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\050\ufff5\051\ufff5\106\ufff5\001\002\000\004" +
    "\045\u011b\001\002\000\004\011\u011c\001\002\000\010\100" +
    "\044\101\047\106\203\001\002\000\006\045\u011e\051\u011f" +
    "\001\002\000\004\013\u0120\001\002\000\006\045\uffd4\053" +
    "\uffd4\001\002\000\004\104\u0121\001\002\000\004\051\u0122" +
    "\001\002\000\006\045\uffd3\053\uffd3\001\002\000\004\050" +
    "\u012f\001\002\000\010\045\u0125\051\uffdf\106\uffdf\001\002" +
    "\000\004\026\u0127\001\002\000\006\051\uffe0\106\uffe0\001" +
    "\002\000\004\050\u0128\001\002\000\004\007\u0129\001\002" +
    "\000\004\103\u012a\001\002\000\004\045\u012b\001\002\000" +
    "\004\016\u012c\001\002\000\004\103\u012d\001\002\000\004" +
    "\051\u012e\001\002\000\006\051\uffcf\106\uffcf\001\002\000" +
    "\004\012\u0130\001\002\000\004\103\u0131\001\002\000\004" +
    "\045\u0132\001\002\000\004\011\u0133\001\002\000\010\100" +
    "\044\101\047\106\203\001\002\000\006\045\u0135\051\u0136" +
    "\001\002\000\004\013\u0137\001\002\000\006\045\uffdc\053" +
    "\uffdc\001\002\000\004\104\u0138\001\002\000\004\051\u0139" +
    "\001\002\000\006\045\uffdb\053\uffdb\001\002\000\020\043" +
    "\u013d\044\u013f\055\uffc0\100\044\101\047\103\u013c\106\u0140" +
    "\001\002\000\004\055\u014d\001\002\000\016\071\u0141\072" +
    "\u0145\073\u0142\074\u0146\075\u0144\076\u0143\001\002\000\004" +
    "\055\uffbc\001\002\000\016\071\u0141\072\u0145\073\u0142\074" +
    "\u0146\075\u0144\076\u0143\001\002\000\004\055\uffbb\001\002" +
    "\000\016\071\u0141\072\u0145\073\u0142\074\u0146\075\u0144\076" +
    "\u0143\001\002\000\012\100\uff90\101\uff90\103\uff90\106\uff90" +
    "\001\002\000\012\100\uff8e\101\uff8e\103\uff8e\106\uff8e\001" +
    "\002\000\012\100\uff8b\101\uff8b\103\uff8b\106\uff8b\001\002" +
    "\000\012\100\uff8c\101\uff8c\103\uff8c\106\uff8c\001\002\000" +
    "\012\100\uff8f\101\uff8f\103\uff8f\106\uff8f\001\002\000\012" +
    "\100\uff8d\101\uff8d\103\uff8d\106\uff8d\001\002\000\006\100" +
    "\044\101\047\001\002\000\004\055\uffbd\001\002\000\006" +
    "\100\044\101\047\001\002\000\004\055\uffbf\001\002\000" +
    "\004\103\u014c\001\002\000\004\055\uffbe\001\002\000\004" +
    "\050\u014e\001\002\000\020\003\uffb9\036\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\050\uffb9\106\022\001\002\000\016\003\021" +
    "\036\016\040\010\041\005\042\011\050\067\001\002\000" +
    "\022\003\uffb9\036\uffb9\040\uffb9\041\uffb9\042\uffb9\050\uffb9" +
    "\051\uffb9\106\022\001\002\000\020\003\021\036\016\040" +
    "\010\041\005\042\011\050\u0152\051\u0153\001\002\000\004" +
    "\004\u015a\001\002\000\026\002\uffc6\003\uffc6\036\uffc6\037" +
    "\u0155\040\uffc6\041\uffc6\042\uffc6\050\uffc6\051\uffc6\106\uffc6" +
    "\001\002\000\024\002\ufff3\003\ufff3\036\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\050\ufff3\051\ufff3\106\ufff3\001\002\000\004" +
    "\050\u0156\001\002\000\016\003\021\036\016\040\010\041" +
    "\005\042\011\050\067\001\002\000\022\003\uffb9\036\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\050\uffb9\051\u0159\106\022\001" +
    "\002\000\016\003\021\036\016\040\010\041\005\042\011" +
    "\050\u0152\001\002\000\024\002\uffc7\003\uffc7\036\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\050\uffc7\051\uffc7\106\uffc7\001\002" +
    "\000\004\052\u015b\001\002\000\004\050\u015c\001\002\000" +
    "\016\003\152\005\141\006\155\011\144\012\143\014\147" +
    "\001\002\000\006\051\uffb9\106\022\001\002\000\004\051" +
    "\u015f\001\002\000\024\002\ufff6\003\ufff6\036\ufff6\040\ufff6" +
    "\041\ufff6\042\ufff6\050\ufff6\051\ufff6\106\ufff6\001\002\000" +
    "\004\002\001\001\002\000\020\003\uffb9\036\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\050\uffb9\106\022\001\002\000\016\003" +
    "\021\036\016\040\010\041\005\042\011\050\067\001\002" +
    "\000\022\003\uffb9\036\uffb9\040\uffb9\041\uffb9\042\uffb9\050" +
    "\uffb9\051\uffb9\106\022\001\002\000\020\003\021\036\016" +
    "\040\010\041\005\042\011\050\u0152\051\u0165\001\002\000" +
    "\004\041\u0166\001\002\000\004\054\u0167\001\002\000\020" +
    "\043\u013d\044\u013f\055\uffc0\100\044\101\047\103\u013c\106" +
    "\u0140\001\002\000\004\055\u0169\001\002\000\004\046\u016a" +
    "\001\002\000\024\002\uffc1\003\uffc1\036\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\050\uffc1\051\uffc1\106\uffc1\001\002\000\004" +
    "\106\u016c\001\002\000\004\066\u016d\001\002\000\006\100" +
    "\044\101\047\001\002\000\004\046\u016f\001\002\000\004" +
    "\106\u0170\001\002\000\016\071\u0141\072\u0145\073\u0142\074" +
    "\u0146\075\u0144\076\u0143\001\002\000\010\100\044\101\047" +
    "\106\u0174\001\002\000\004\046\u0175\001\002\000\004\046" +
    "\uffc4\001\002\000\004\046\uffc3\001\002\000\004\106\u0176" +
    "\001\002\000\012\064\026\065\035\067\040\070\036\001" +
    "\002\000\004\055\u0178\001\002\000\004\050\u0179\001\002" +
    "\000\020\003\uffb9\036\uffb9\040\uffb9\041\uffb9\042\uffb9\050" +
    "\uffb9\106\022\001\002\000\016\003\021\036\016\040\010" +
    "\041\005\042\011\050\067\001\002\000\022\003\uffb9\036" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\050\uffb9\051\uffb9\106\022" +
    "\001\002\000\020\003\021\036\016\040\010\041\005\042" +
    "\011\050\u0152\051\u017d\001\002\000\024\002\uffc5\003\uffc5" +
    "\036\uffc5\040\uffc5\041\uffc5\042\uffc5\050\uffc5\051\uffc5\106" +
    "\uffc5\001\002\000\020\043\u013d\044\u013f\055\uffc0\100\044" +
    "\101\047\103\u013c\106\u0140\001\002\000\004\055\u0180\001" +
    "\002\000\004\050\u0181\001\002\000\020\003\uffb9\036\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\050\uffb9\106\022\001\002\000" +
    "\016\003\021\036\016\040\010\041\005\042\011\050\067" +
    "\001\002\000\022\003\uffb9\036\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\050\uffb9\051\uffb9\106\022\001\002\000\020\003\021" +
    "\036\016\040\010\041\005\042\011\050\u0152\051\u0185\001" +
    "\002\000\024\002\uffc2\003\uffc2\036\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\050\uffc2\051\uffc2\106\uffc2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\026\002\013\003\003\004\023\016\017\017" +
    "\005\044\006\047\022\050\012\051\014\052\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\017\017\u0157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\030\026\033\027\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\045\030\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\030\026" +
    "\057\027\031\001\001\000\002\001\001\000\006\025\061" +
    "\030\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\065\004\023\016\017\017\005" +
    "\044\006\047\022\050\012\051\014\052\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\007\153\010\144\011\135" +
    "\012\147\013\137\015\141\036\152\037\145\041\136\042" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\017\017\u0117\001" +
    "\001\000\002\001\001\000\016\030\204\031\374\032\203" +
    "\033\200\034\177\035\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\030\204\031\336\032\203\033\200" +
    "\034\177\035\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\163\001\001" +
    "\000\016\030\204\031\245\032\203\033\200\034\177\035" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\030\204\031\176\032\203\033" +
    "\200\034\177\035\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\217" +
    "\001\001\000\004\030\215\001\001\000\004\030\213\001" +
    "\001\000\004\030\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\233\001\001\000\004\030\231\001\001\000" +
    "\004\030\227\001\001\000\004\030\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\030\204\031" +
    "\237\032\203\033\200\034\177\035\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\030\204\031\250\032\203\033" +
    "\200\034\177\035\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\030\204\031\302\032\203" +
    "\033\200\034\177\035\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\030\204\031\341\032\203\033\200\034" +
    "\177\035\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\030\204\031\360\032\203\033\200\034\177\035" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\030\204\031\363\032\203\033\200\034\177\035\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\367\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\030\204\031\u0111\032\203\033\200\034" +
    "\177\035\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\030\204\031\u011c\032" +
    "\203\033\200\034\177\035\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u0125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\030\204\031" +
    "\u0133\032\203\033\200\034\177\035\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u013d" +
    "\053\u013a\001\001\000\002\001\001\000\004\023\u014a\001" +
    "\001\000\002\001\001\000\004\023\u0148\001\001\000\002" +
    "\001\001\000\004\023\u0146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\u0147\001\001\000" +
    "\002\001\001\000\004\030\u0149\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\017\017\u014e\001\001\000\016\004\023\044\u014f" +
    "\047\022\050\012\051\014\052\011\001\001\000\006\016" +
    "\017\017\u0150\001\001\000\014\004\u0153\047\022\050\012" +
    "\051\014\052\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\023" +
    "\044\u0156\047\022\050\012\051\014\052\011\001\001\000" +
    "\006\016\017\017\u0157\001\001\000\014\004\u0153\047\022" +
    "\050\012\051\014\052\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\153\010\144" +
    "\011\135\012\147\013\137\015\u015c\036\152\037\145\041" +
    "\136\042\150\001\001\000\006\016\017\017\u015d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\017\017\u0161\001\001\000\016\004\023\044\u0162" +
    "\047\022\050\012\051\014\052\011\001\001\000\006\016" +
    "\017\017\u0163\001\001\000\014\004\u0153\047\022\050\012" +
    "\051\014\052\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\u013d\053\u0167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u016d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u0170\001\001\000\006\022" +
    "\u0171\030\u0172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0176\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\017" +
    "\017\u0179\001\001\000\016\004\023\044\u017a\047\022\050" +
    "\012\051\014\052\011\001\001\000\006\016\017\017\u017b" +
    "\001\001\000\014\004\u0153\047\022\050\012\051\014\052" +
    "\011\001\001\000\002\001\001\000\006\030\u013d\053\u017e" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\017\017\u0181\001\001\000\016\004\023\044\u0182\047\022" +
    "\050\012\051\014\052\011\001\001\000\006\016\017\017" +
    "\u0183\001\001\000\014\004\u0153\047\022\050\012\051\014" +
    "\052\011\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<ErrorP> errors = new ArrayList<>();
    private ArrayList<Graph> allGraps = new ArrayList<>();
    private ArrayList<Sentence> sentences = new ArrayList<>();
    private SymTable symTable = new SymTable();
    private Header header = new Header();

    public void syntax_error(Symbol token) {
            if (token.sym != ParserSym.EOF){
            //System.out.println("sintax error: " +token.value + " en la linea " + token.left);
                addError(token, "Sintax error close at: ");
            }
        }

        public void unrecovered_syntax_error(Symbol token) {
            //System.out.println("unrec sintax error: " +token.value + " en la línea " + token.right+" en la columna " + token.left);
            addError(token, "unrec error: ");
        }

        private String removeBrckt(String str){
            return str.replace("[", "").replace("]", "");
        }

        public String removeQuotes(String str){
                return str.replace("\"", "");
            }

        public void addGraphs(ArrayList<Graph> gr){
          if(gr != null){
            for(Graph g : gr){
                allGraps.add(g);
            }
          }
        }

        public void addGraphs(Graph gr){
          if(gr != null){

                allGraps.add(gr);

          }
        }

        public void addSym(String id, Object val){
            if(!symTable.containsVar(id)){
                symTable.addVar(id, val);
            }else {
                addError(new Symbol(0, 0, 0), "Error: " + id + " is already declared");
            }
        }

        public void addSentence(Sentence s){
            sentences.add(s);
        }

        public void addError(Symbol token, String msj) {
            try {
                ArrayList<String> list = new ArrayList<>();
//                for (Integer ex : expected_token_ids()) {
//                    list.add(ParserSym.terminalNames[ex]);
//                }
                errors.add(new ErrorP(token.left, token.right, token.value.toString(), 1, msj, list));
            } catch (Exception e) {

            }
        }

        public Float getValueF(String id){
            if(symTable.getVar(id) instanceof Float){
                return (Float)symTable.getVar(id);
            }else{
                addError(new Symbol(0, 0, 0), "Error: " + id + " is not a number");
                return 0f;
            }
        }

        public String getStringValue(String id){
            if(symTable.getVar(id) instanceof String){
                return (String)symTable.getVar(id);
            }else{
                addError(new Symbol(0, 0, 0), "Error: " + id + " is not a string");
                return "";
            }
        }

        public ArrayList<ErrorP> getErrors() {
            return errors;
        }

        public ArrayList<Graph> getGraphs() {
            return allGraps;
        }

        public Header getHeader() {
            return header;
        }

        public void setHeader(Header header) {
            this.header = header;
        }

        public SymTable getSymTable() {
            return symTable;
        }

        public ArrayList<Sentence> getSentences() {
            return sentences;
        }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // numberD ::= DECIMAL 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = num;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberD",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // numberD ::= NUMBER 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = num;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numberD",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // logicalOperators ::= LESSEQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // logicalOperators ::= GREATEREQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // logicalOperators ::= LESS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // logicalOperators ::= GREATER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // logicalOperators ::= DIFFERENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // logicalOperators ::= EQUALS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOperators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // mathOperators ::= passOperators 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = p.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathOperators",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // mathOperators ::= DIVIDE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = p.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathOperators",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // mathOperators ::= ASTHERISK 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = p.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathOperators",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // mathOperators ::= MINUS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = p.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathOperators",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // mathOperators ::= PLUS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = p.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathOperators",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // passOperators ::= DIV 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("passOperators",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // passOperators ::= MUL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("passOperators",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // passOperators ::= SUB 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("passOperators",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // passOperators ::= SUM 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("passOperators",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // divissorData ::= IDENTIFIER DIVIDE IDENTIFIER 
            {
              Float RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.getValueF(id) / parser.getValueF(id2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("divissorData",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // divissorData ::= IDENTIFIER DIVIDE numberD 
            {
              Float RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.getValueF(id) / Float.parseFloat(num);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("divissorData",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // divissorData ::= numberD DIVIDE IDENTIFIER 
            {
              Float RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Float.parseFloat(num) / parser.getValueF(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("divissorData",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // divissorData ::= numberD DIVIDE numberD 
            {
              Float RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Float.parseFloat(num) / Float.parseFloat(num2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("divissorData",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // multiplyData ::= IDENTIFIER ASTHERISK IDENTIFIER 
            {
              Float RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.getValueF(id) * parser.getValueF(id2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplyData",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // multiplyData ::= IDENTIFIER ASTHERISK numberD 
            {
              Float RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.getValueF(id) * Float.parseFloat(num);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplyData",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // multiplyData ::= numberD ASTHERISK IDENTIFIER 
            {
              Float RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Float.parseFloat(num) * parser.getValueF(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplyData",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // multiplyData ::= numberD ASTHERISK numberD 
            {
              Float RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Float.parseFloat(num) * Float.parseFloat(num2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplyData",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // substractionData ::= IDENTIFIER SUB IDENTIFIER 
            {
              Float RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.getValueF(id) - parser.getValueF(id2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substractionData",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // substractionData ::= IDENTIFIER SUB numberD 
            {
              Float RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.getValueF(id) - Float.parseFloat(num);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substractionData",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // substractionData ::= numberD SUB IDENTIFIER 
            {
              Float RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Float.parseFloat(num) - parser.getValueF(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substractionData",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // substractionData ::= numberD SUB numberD 
            {
              Float RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Float.parseFloat(num) - Float.parseFloat(num2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substractionData",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sumatoryData ::= IDENTIFIER PLUS IDENTIFIER 
            {
              Float RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.getValueF(id) + parser.getValueF(id2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sumatoryData",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sumatoryData ::= IDENTIFIER PLUS numberD 
            {
              Float RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.getValueF(id) + Float.parseFloat(num);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sumatoryData",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sumatoryData ::= numberD PLUS IDENTIFIER 
            {
              Float RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Float.parseFloat(num) + parser.getValueF(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sumatoryData",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sumatoryData ::= numberD PLUS numberD 
            {
              Float RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Float.parseFloat(num) + Float.parseFloat(num2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sumatoryData",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dataValue ::= divissorData 
            {
              Float RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float div = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = div;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataValue",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dataValue ::= substractionData 
            {
              Float RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float sub = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = sub;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataValue",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dataValue ::= sumatoryData 
            {
              Float RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float sum = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = sum;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataValue",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dataValue ::= multiplyData 
            {
              Float RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float mul = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = mul;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataValue",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // dataValue ::= numberD 
            {
              Float RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Float.parseFloat(num);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataValue",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // varDecl ::= FALSE SEMICOLON 
            {
              String RESULT =null;
		  RESULT = "false";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // varDecl ::= TRUE SEMICOLON 
            {
              String RESULT =null;
		  RESULT = "true";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // varDecl ::= numberD SEMICOLON 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // varDecl ::= STRING SEMICOLON 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // varAssign ::= mathOperators numberD SEMICOLON 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT =val+val1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAssign",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // varAssign ::= mathOperators SEMICOLON 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAssign",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // vars ::= IDENTIFIER varAssign 
            {
              SymTable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  SymTable st = new SymTable();
                                                                                    st.addVar(parser.removeQuotes(id), val);
                                                                                    RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // vars ::= vars IDENTIFIER varAssign 
            {
              SymTable RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymTable st = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  st.addVar(parser.removeQuotes(id), val);
                                                                                    RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // vars ::= vars IDENTIFIER ASSIGN varDecl 
            {
              SymTable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSym(parser.removeQuotes(id), val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // vars ::= IDENTIFIER ASSIGN varDecl 
            {
              SymTable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSym(parser.removeQuotes(id), val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // vls ::= 
            {
              SymTable RESULT =null;
		  RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // vls ::= vars 
            {
              SymTable RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymTable st = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = st;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conditionalDecl ::= FALSE 
            {
              Conditional RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // conditionalDecl ::= TRUE 
            {
              Conditional RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conditionalDecl ::= IDENTIFIER logicalOperators numberD 
            {
              Conditional RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Conditional(id, op.toString(), num, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conditionalDecl ::= STRING logicalOperators STRING 
            {
              Conditional RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int str2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int str2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Conditional(parser.removeQuotes(str), op.toString(), parser.removeQuotes(str2), false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // conditionalDecl ::= numberD logicalOperators numberD 
            {
              Conditional RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Conditional(num, op.toString(), num2, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // conditionalDecl ::= 
            {
              Conditional RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalDecl",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // doWhileDecl ::= DOWHILE OPENBRACKET vls graphDecl vls CLOSEBRACKET WHILE OPENPARENTHESIS conditionalDecl CLOSEPARENTHESIS SEMICOLON 
            {
              DoSentence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymTable s = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArrayList<Graph> gr = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymTable s2 = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Conditional cond = (Conditional)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DoSentence(gr, cond, s, s2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doWhileDecl",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // whileDecl ::= WHILE OPENPARENTHESIS conditionalDecl CLOSEPARENTHESIS OPENBRACKET vls graphDecl vls CLOSEBRACKET 
            {
              WhileSentence RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Conditional cond = (Conditional)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymTable s = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Graph> gr = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymTable s2 = (SymTable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new WhileSentence(gr, cond, s, s2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileDecl",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // forCondition ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forCondition",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // forCondition ::= numberD 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = num;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forCondition",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // forDecl ::= FOR OPENPARENTHESIS IDENTIFIER ASSIGN numberD SEMICOLON IDENTIFIER logicalOperators forCondition SEMICOLON IDENTIFIER passOperators CLOSEPARENTHESIS OPENBRACKET vls graphDecl vls CLOSEBRACKET 
            {
              ForSentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int logOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int logOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String logOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int fcondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int fcondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String fcond = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int passOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int passOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String passOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Graph> gr = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  parser.addSym(parser.removeQuotes(id), num);
                                                                                    RESULT = new ForSentence(gr, id, Float.parseFloat(num), logOp, fcond, passOp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forDecl",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ifDecl ::= IF OPENPARENTHESIS conditionalDecl CLOSEPARENTHESIS OPENBRACKET vls graphDecl vls CLOSEBRACKET 
            {
              IfElSentence RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Conditional cond = (Conditional)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Graph> gr = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new IfElSentence(gr, cond); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifDecl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ifDecl ::= IF OPENPARENTHESIS conditionalDecl CLOSEPARENTHESIS OPENBRACKET vls graphDecl vls CLOSEBRACKET ELSE OPENBRACKET graphDecl CLOSEBRACKET 
            {
              IfElSentence RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Conditional cond = (Conditional)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList<Graph> gr = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int gr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Graph> gr2 = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfElSentence(gr, gr2, cond); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifDecl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencesDecl ::= error 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencesDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencesDecl ::= doWhileDecl 
            {
              Object RESULT =null;
		int dowhileSentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dowhileSentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DoSentence dowhileSent = (DoSentence)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSentence(dowhileSent);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencesDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencesDecl ::= forDecl 
            {
              Object RESULT =null;
		int forSentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int forSentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForSentence forSent = (ForSentence)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSentence(forSent);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencesDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencesDecl ::= whileDecl 
            {
              Object RESULT =null;
		int whileSentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileSentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileSentence whileSent = (WhileSentence)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSentence(whileSent);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencesDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencesDecl ::= ifDecl 
            {
              Object RESULT =null;
		int ifSentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifSentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfElSentence ifSent = (IfElSentence)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addSentence(ifSent);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencesDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // infoCard ::= VALUE dataValue COMMA LABEL STRING COMMA DESCRIPTION STRING COMMA ICON STRING COMMA COLOR HEXCODE COMMA LINK STRING CLOSEBRACKET 
            {
              PieGraph RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int descleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int descright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int iconleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iconright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String icon = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String link = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val, parser.removeQuotes(col)));
                                                                                    RESULT = new PieGraph(data, parser.removeQuotes(desc), parser.removeQuotes(icon), parser.removeQuotes(link));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infoCard",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // infoCard ::= VALUE dataValue COMMA LABEL STRING COMMA DESCRIPTION STRING CLOSEBRACKET 
            {
              PieGraph RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int descleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int descright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val));
                                                                                    RESULT = new PieGraph(data, parser.removeQuotes(desc));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infoCard",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pieChart ::= CHART OPENBRACKET TITTLE STRING COMMA LEGENDPOSITION STRING CLOSEBRACKET 
            {
              ChartGraph RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new ChartGraph(parser.removeQuotes(tittle), parser.removeQuotes(pos));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieChart",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // chartGraphs ::= CHART OPENBRACKET TITTLE STRING COMMA XAXISLABEL STRING COMMA YAXISLABEL STRING CLOSEBRACKET 
            {
              ChartGraph RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int xLabelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xLabelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String xLabel = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yLabelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yLabelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String yLabel = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new ChartGraph(parser.removeQuotes(tittle), parser.removeQuotes(xLabel), parser.removeQuotes(yLabel));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chartGraphs",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dataDecl ::= dataDecl COMMA OPENBRACKET CATEGORY STRING COMMA VALUE dataValue COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int barsDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int barsDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ArrayList<DataGraph> barsData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  barsData.add(new DataGraph(parser.removeQuotes(cat), val, parser.removeQuotes(col)));
                                                                                    RESULT=barsData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dataDecl ::= dataDecl COMMA OPENBRACKET CATEGORY STRING COMMA VALUE dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int barsDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int barsDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> barsData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  barsData.add(new DataGraph(parser.removeQuotes(cat), val));
                                                                                    RESULT=barsData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dataDecl ::= CATEGORY STRING COMMA VALUE dataValue COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(cat), val, parser.removeQuotes(col)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dataDecl ::= CATEGORY STRING COMMA VALUE dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(cat), val));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // plotsData ::= plotsData COMMA OPENBRACKET Xaxis dataValue COMMA Yaxis dataValue COMMA SIZE numberD COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(x, y, Float.parseFloat(s), parser.removeQuotes(col)));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // plotsData ::= plotsData COMMA OPENBRACKET Xaxis dataValue COMMA Yaxis dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(x, y));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // plotsData ::= Xaxis dataValue COMMA Yaxis dataValue COMMA SIZE numberD COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y, Float.parseFloat(s), parser.removeQuotes(col)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // plotsData ::= Xaxis dataValue COMMA Yaxis dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotsData",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // plotGraphDecl ::= plotsData CLOSEBRACE 
            {
              PlotGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new PlotGraph(data);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotGraphDecl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // plotGraphDecl ::= plotsData CLOSEBRACE COMMA chartGraphs 
            {
              PlotGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new PlotGraph(data, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plotGraphDecl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pieDataDecl ::= pieDataDecl COMMA OPENBRACKET LABEL STRING COMMA VALUE dataValue COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pieDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int pieDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ArrayList<DataGraph> pieData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  pieData.add(new DataGraph(parser.removeQuotes(label), val, parser.removeQuotes(col)));
                                                                                    RESULT=pieData;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pieDataDecl ::= pieDataDecl COMMA OPENBRACKET LABEL STRING COMMA VALUE dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pieDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pieDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> pieData = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  pieData.add(new DataGraph(parser.removeQuotes(label), val));
                                                                                    RESULT=pieData;                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pieDataDecl ::= LABEL STRING COMMA VALUE dataValue COMMA COLOR HEXCODE CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val, parser.removeQuotes(col)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pieDataDecl ::= LABEL STRING COMMA VALUE dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieDataDecl",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // pieGraphDecl ::= pieDataDecl CLOSEBRACE 
            {
              PieGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new PieGraph(data);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieGraphDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // pieGraphDecl ::= pieDataDecl CLOSEBRACE COMMA pieChart 
            {
              PieGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new PieGraph(data, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pieGraphDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // linePoints ::= linePoints COMMA OPENBRACKET Xaxis dataValue COMMA Yaxis dataValue COMMA LABEL STRING CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(x, y, parser.removeQuotes(label)));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // linePoints ::= linePoints COMMA OPENBRACKET Xaxis dataValue COMMA Yaxis dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  points.add(new DataGraph(x, y));
                                                                                    RESULT = points;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // linePoints ::= Xaxis dataValue COMMA Yaxis dataValue COMMA LABEL STRING CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y, parser.removeQuotes(label)));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // linePoints ::= Xaxis dataValue COMMA Yaxis dataValue CLOSEBRACKET 
            {
              ArrayList<DataGraph> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y));
                                                                                    RESULT = data;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linePoints",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lineDataDecl ::= lineDataDecl CLOSEBRACKET COMMA OPENBRACKET NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE COMMA COLOR HEXCODE COMMA LINESTYLE STRING CLOSEBRACKET 
            {
              ArrayList<LinealData> RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-18)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int styleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int styleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String style = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  lineData.add(new LinealData(parser.removeQuotes(name), parser.removeQuotes(col), parser.removeQuotes(style), points));
                                                                                    RESULT = lineData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lineDataDecl ::= lineDataDecl CLOSEBRACKET COMMA OPENBRACKET NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE CLOSEBRACKET 
            {
              ArrayList<LinealData> RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  lineData.add(new LinealData(parser.removeQuotes(name), points));
                                                                                    RESULT = lineData;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lineDataDecl ::= NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE COMMA COLOR HEXCODE COMMA LINESTYLE STRING 
            {
              ArrayList<LinealData> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int styleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int styleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String style = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  ArrayList<LinealData> lineData = new ArrayList<>();
                                                                                    lineData.add(new LinealData(parser.removeQuotes(name), parser.removeQuotes(col), parser.removeQuotes(style), points));
                                                                                    RESULT = lineData;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lineDataDecl ::= NAME STRING COMMA POINTS OPENBRACE OPENBRACKET linePoints CLOSEBRACE 
            {
              ArrayList<LinealData> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pointsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pointsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> points = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  ArrayList<LinealData> lineData = new ArrayList<>();
                                                                                    lineData.add(new LinealData(parser.removeQuotes(name), points));
                                                                                    RESULT = lineData;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineDataDecl",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lineGraphDecl ::= lineDataDecl CLOSEBRACE 
            {
              LinealGraph RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinealGraph(lineData);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineGraphDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lineGraphDecl ::= lineDataDecl CLOSEBRACE COMMA chartGraphs 
            {
              LinealGraph RESULT =null;
		int lineDataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lineDataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<LinealData> lineData = (ArrayList<LinealData>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinealGraph(lineData, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineGraphDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // barsGraphDecl ::= dataDecl CLOSEBRACE 
            {
              BarsGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BarsGraph(data);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barsGraphDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // barsGraphDecl ::= dataDecl CLOSEBRACE COMMA chartGraphs 
            {
              BarsGraph RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DataGraph> data = (ArrayList<DataGraph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int chartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChartGraph chart = (ChartGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BarsGraph(data, chart);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barsGraphDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // graphTypes ::= error 
            {
              Graph RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // graphTypes ::= infoCard 
            {
              Graph RESULT =null;
		int infoCardleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int infoCardright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PieGraph infoCard = (PieGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = infoCard;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // graphTypes ::= plotGraphDecl 
            {
              Graph RESULT =null;
		int plotGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plotGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlotGraph plotGraph = (PlotGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = plotGraph;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // graphTypes ::= pieGraphDecl 
            {
              Graph RESULT =null;
		int pieGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pieGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PieGraph pieGraph = (PieGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pieGraph;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // graphTypes ::= lineGraphDecl 
            {
              Graph RESULT =null;
		int lineGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinealGraph lineGraph = (LinealGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lineGraph;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graphTypes ::= barsGraphDecl 
            {
              Graph RESULT =null;
		int barsGraphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int barsGraphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BarsGraph barsGraph = (BarsGraph)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=  barsGraph;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphTypes",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graphDecl ::= graphDecl vls sentencesDecl 
            {
              ArrayList<Graph> RESULT =null;
		int grsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int grsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Graph> grs = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = grs;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphDecl",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graphDecl ::= sentencesDecl 
            {
              ArrayList<Graph> RESULT =null;
		RESULT = new ArrayList<Graph>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphDecl",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graphDecl ::= OPENBRACKET DATA OPENBRACE OPENBRACKET graphTypes vls CLOSEBRACKET 
            {
              ArrayList<Graph> RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Graph gr = (Graph)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 ArrayList<Graph> grs = new ArrayList<Graph>();
                                                                                   grs.add(gr); /*parser.addGraphs(gr);*/ RESULT = grs;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphDecl",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graphDecl ::= graphDecl vls OPENBRACKET DATA OPENBRACE OPENBRACKET graphTypes vls CLOSEBRACKET 
            {
              ArrayList<Graph> RESULT =null;
		int grsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int grsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<Graph> grs = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int grleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Graph gr = (Graph)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 grs.add(gr); /*parser.addGraphs(gr);*/ RESULT = grs;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphDecl",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // jsonDecl ::= vls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsonDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // jsonDecl ::= graphDecl 
            {
              Object RESULT =null;
		int graphsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int graphsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Graph> graphs = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.addGraphs(graphs);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsonDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // footerDecl ::= COPYRIGHT STRING 
            {
              String RESULT =null;
		int copyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int copyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String copy = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.removeQuotes(copy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("footerDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // headerDecl ::= TITTLE STRING 
            {
              String RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = parser.removeQuotes(tittle);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("headerDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // keywordsDecl ::= keywordsDecl COMMA STRING 
            {
              ArrayList<String> RESULT =null;
		int keysleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int keysright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> keys = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String word = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  keys.add(parser.removeQuotes(word));
                                                                                    keys.addAll(keys);
                                                                                    RESULT = keys;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keywordsDecl",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // keywordsDecl ::= STRING 
            {
              ArrayList<String> RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String word = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  ArrayList<String> keys = new ArrayList<>();
                                                                                    keys.add(parser.removeQuotes(word));
                                                                                    RESULT = keys;                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keywordsDecl",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= 
            {
              Header RESULT =null;
		  parser.setHeader(new Header());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= TITTLE STRING COMMA DESCRIPTION STRING COMMA KEYWORDS OPENBRACE keywordsDecl CLOSEBRACE COMMA HEADER OPENBRACKET headerDecl CLOSEBRACKET COMMA FOOTER OPENBRACKET footerDecl CLOSEBRACKET COMMA BACKGROUNDCOLOR HEXCODE COMMA FONTFAMILY STRING COMMA FONTSIZE STRING 
            {
              Header RESULT =null;
		int tittleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).left;
		int tittleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).right;
		String tittle = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-27)).value;
		int descleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int descright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int keysleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).left;
		int keysright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).right;
		ArrayList<String> keys = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-20)).value;
		int headerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String header = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int footerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int footerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String footer = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int backleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int backright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String back = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fontleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fontright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String font = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fontSizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fontSizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fontSize = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  parser.setHeader(new Header(tittle, desc, keys, header, footer, back, font, fontSize));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // graphPi ::= jsonDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPi",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // graphPi ::= OPENBRACKET header jsonDecl CLOSEBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPi",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= graphPi EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

