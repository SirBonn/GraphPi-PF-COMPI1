package  srbn.graphpi.BackEnd.Parser;

import java_cup.runtime.*;
import srbn.graphpi.BackEnd.DomainObjs.Errors.*;
import srbn.graphpi.BackEnd.DomainObjs.Graphs.*;
import srbn.graphpi.BackEnd.DomainObjs.SymTable;
import srbn.graphpi.BackEnd.DomainObjs.Sentences.*;
import srbn.graphpi.BackEnd.DomainObjs.Header;
import java.util.ArrayList;

//class Parser;

parser code{:

    private ArrayList<ErrorP> errors = new ArrayList<>();
    private ArrayList<Graph> allGraps = new ArrayList<>();
    private ArrayList<Sentence> sentences = new ArrayList<>();
    private SymTable symTable = new SymTable();
    private Header header;

    public void syntax_error(Symbol token) {
            if (token.sym != ParserSym.EOF){
            //System.out.println("sintax error: " +token.value + " en la linea " + token.left);
                addError(token, "Sintax error close at: ");
            }
        }

        public void unrecovered_syntax_error(Symbol token) {
            //System.out.println("unrec sintax error: " +token.value + " en la l√≠nea " + token.right+" en la columna " + token.left);
            addError(token, "unrec error: ");
        }

        private String removeBrckt(String str){
            return str.replace("[", "").replace("]", "");
        }

        public String removeQuotes(String str){
                return str.replace("\"", "");
            }

        public void addGraphs(ArrayList<Graph> gr){
            for(Graph g : gr){
                allGraps.add(g);
            }
        }

        public void addSym(String id, Object val){
            symTable.addVar(id, val);
        }

        public void addSentence(Sentence s){
            sentences.add(s);
        }

        public void addError(Symbol token, String msj) {
            try {
                ArrayList<String> list = new ArrayList<>();
//                for (Integer ex : expected_token_ids()) {
//                    list.add(ParserSym.terminalNames[ex]);
//                }
                errors.add(new ErrorP(token.left, token.right, token.value.toString(), 1, msj, list));
            } catch (Exception e) {

            }
        }

        public int getIntValue(String id){
            if(symTable.getVar(id) instanceof Integer){
                return (int)symTable.getVar(id);
            }else{
                addError(new Symbol(0, 0, 0), "Error: " + id + " is not a number");
                return 0;
            }
        }

        public String getStringValue(String id){
            if(symTable.getVar(id) instanceof String){
                return (String)symTable.getVar(id);
            }else{
                addError(new Symbol(0, 0, 0), "Error: " + id + " is not a string");
                return "";
            }
        }

        public ArrayList<ErrorP> getErrors() {
            return errors;
        }

        public ArrayList<Graph> getGraphs() {
            return allGraps;
        }

        public Header getHeader() {
            return header;
        }

        public void setHeader(Header header) {
            this.header = header;
        }

        public SymTable getSymTable() {
            return symTable;
        }

        public ArrayList<Sentence> getSentences() {
            return sentences;
        }

:}

non terminal        graphPi, jsonDecl, sentencesDecl, varDecl, mathOperators,
                    mathSentence, vars, vls, allDecl;

non terminal        BarsGraph   barsGraphDecl;
non terminal        PieGraph    pieGraphDecl, infoCard;
non terminal        LinealGraph lineGraphDecl;
non terminal        PlotGraph   plotGraphDecl;
non terminal        Header      header;
non terminal        Graph       graphTypes;
non terminal        String headerDecl, footerDecl, forCondition, logicalOperators, passOperators, varAssign;
non terminal        Integer dataValue, multiplyData;
non terminal        ArrayList<DataGraph> dataDecl, plotsData, linePoints, pieDataDecl;
non terminal        ArrayList<LinealData> lineDataDecl;
non terminal        ArrayList<String> keywordsDecl;
non terminal        ArrayList<Graph> graphDecl;
non terminal        ChartGraph chartGraphs, pieChart;
non terminal        DoSentence doWhileDecl;
non terminal        IfElSentence ifDecl;
non terminal        ForSentence forDecl;
non terminal        WhileSentence whileDecl;
non terminal        Conditional conditionalDecl;


terminal            DATA, CATEGORY, NAME, TITTLE, POINTS, VALUE, LABEL, COLOR, Xaxis, Yaxis, LEGENDPOSITION,
                    XAXISLABEL, YAXISLABEL, SIZE, DESCRIPTION, ICON, LINK, LINESTYLE, CHART, KEYWORDS,
                    HEADER, FOOTER, BACKGROUNDCOLOR, FONTFAMILY, FONTSIZE, COPYRIGHT,
                    IF, ELSE, FOR, WHILE, DOWHILE, TRUE, FALSE,
                    COMMA, SEMICOLON, DOBLEDOT, OPENBRACKET, CLOSEBRACKET, OPENBRACE, CLOSEBRACE, OPENPARENTHESIS,
                    CLOSEPARENTHESIS, DOBLEQUOTE, SINGLEQUOTE,
                    PLUS, MINUS, ASTHERISK, DIVIDE, SUM, SUB, ASSIGN, MUL, DIV,
                    EQUALS, DIFFERENT, GREATER, LESS, GREATEREQUAL, LESSEQUAL;

terminal            String DIGIT, NUMBER, LETTER, STRING, HEXCODE, NUMBSIZE, IDENTIFIER;

start with          graphPi;

graphPi::=
                    OPENBRACKET header jsonDecl CLOSEBRACKET
                |   jsonDecl
                ;

header::=           TITTLE STRING:tittle COMMA DESCRIPTION STRING:desc COMMA
                    KEYWORDS OPENBRACE keywordsDecl:keys CLOSEBRACE COMMA
                    HEADER OPENBRACKET headerDecl:header CLOSEBRACKET COMMA
                    FOOTER OPENBRACKET footerDecl:footer CLOSEBRACKET COMMA
                    BACKGROUNDCOLOR HEXCODE:back COMMA FONTFAMILY STRING:font COMMA
                    FONTSIZE STRING:fontSize                                    {:  parser.setHeader(new Header(tittle, desc, keys, header, footer, back, font, fontSize));:}
                |                                                               {:  parser.setHeader(new Header());:}
                |   error                                                       {::}
                ;

keywordsDecl::=     STRING:word                                                 {:  ArrayList<String> keys = new ArrayList<>();
                                                                                    keys.add(parser.removeQuotes(word));
                                                                                    RESULT = keys;                                  :}
                |   keywordsDecl:keys COMMA STRING:word                         {:  keys.add(parser.removeQuotes(word));
                                                                                    keys.addAll(keys);
                                                                                    RESULT = keys;                                  :}
                ;

headerDecl::=       TITTLE STRING:tittle                                        {:  RESULT = parser.removeQuotes(tittle);:}
                ;

footerDecl::=       COPYRIGHT STRING:copy                                       {:  RESULT = parser.removeQuotes(copy);:}
                ;

jsonDecl::=
                    graphDecl:graphs                                            {:  parser.addGraphs(graphs);:}
                |   vls sentencesDecl
                ;

graphDecl::=
                    graphDecl:grs vls OPENBRACKET DATA OPENBRACE OPENBRACKET
                    graphTypes:gr vls CLOSEBRACKET                              {: grs.add(gr); RESULT = grs;:}
                |   OPENBRACKET DATA OPENBRACE OPENBRACKET graphTypes:gr
                    CLOSEBRACKET                                                {: ArrayList<Graph> grs = new ArrayList<Graph>();
                                                                                   grs.add(gr); RESULT = grs;:}

                ;

graphTypes::=
                    barsGraphDecl:barsGraph                                     {: RESULT=  barsGraph;  :}
                |   lineGraphDecl:lineGraph                                     {: RESULT = lineGraph;  :}
                |   pieGraphDecl:pieGraph                                       {: RESULT = pieGraph;   :}
                |   plotGraphDecl:plotGraph                                     {: RESULT = plotGraph;  :}
                |   infoCard:infoCard                                           {: RESULT = infoCard;   :}
                |   error                                                       {::}
                ;


barsGraphDecl::=    dataDecl:data CLOSEBRACE COMMA
                    chartGraphs:chart                                           {: RESULT = new BarsGraph(data, chart);:}
                |   dataDecl:data CLOSEBRACE                                    {: RESULT = new BarsGraph(data);:}
                ;

lineGraphDecl::=    lineDataDecl:lineData CLOSEBRACE COMMA
                    chartGraphs:chart                                           {: RESULT = new LinealGraph(lineData, chart);:}
                |   lineDataDecl:lineData CLOSEBRACE                            {: RESULT = new LinealGraph(lineData);:}
                ;

lineDataDecl::=
                    NAME STRING:name COMMA POINTS OPENBRACE OPENBRACKET
                    linePoints:points CLOSEBRACE                                {:  ArrayList<LinealData> lineData = new ArrayList<>();
                                                                                    lineData.add(new LinealData(parser.removeQuotes(name), points));
                                                                                    RESULT = lineData;:}
                |   NAME STRING:name COMMA POINTS OPENBRACE OPENBRACKET linePoints:points
                    CLOSEBRACE COMMA COLOR HEXCODE:col COMMA LINESTYLE
                    STRING:style                                                {:  ArrayList<LinealData> lineData = new ArrayList<>();
                                                                                    lineData.add(new LinealData(parser.removeQuotes(name), parser.removeQuotes(col), parser.removeQuotes(style), points));
                                                                                    RESULT = lineData;:}
                |   lineDataDecl:lineData CLOSEBRACKET COMMA OPENBRACKET NAME
                    STRING:name COMMA POINTS OPENBRACE OPENBRACKET
                    linePoints:points CLOSEBRACE CLOSEBRACKET                   {:  lineData.add(new LinealData(parser.removeQuotes(name), points));
                                                                                    RESULT = lineData;                                :}
                |   lineDataDecl:lineData CLOSEBRACKET COMMA OPENBRACKET NAME
                    STRING:name COMMA POINTS OPENBRACE OPENBRACKET
                    linePoints:points CLOSEBRACE
                    COMMA COLOR HEXCODE:col COMMA LINESTYLE STRING:style
                    CLOSEBRACKET                                                {:  lineData.add(new LinealData(parser.removeQuotes(name), parser.removeQuotes(col), parser.removeQuotes(style), points));
                                                                                    RESULT = lineData;                                :}
                ;

linePoints::=       Xaxis dataValue:x COMMA Yaxis dataValue:y  CLOSEBRACKET     {:  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y));
                                                                                    RESULT = data;                                  :}
                |   Xaxis dataValue:x COMMA Yaxis dataValue:y COMMA LABEL STRING:label
                    CLOSEBRACKET                                                {:  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y, parser.removeQuotes(label)));
                                                                                    RESULT = data;                                  :}
                |   linePoints:points COMMA OPENBRACKET Xaxis dataValue:x COMMA
                    Yaxis dataValue:y CLOSEBRACKET                              {:  points.add(new DataGraph(x, y));
                                                                                    RESULT = points;                                :}
                |   linePoints:points COMMA OPENBRACKET Xaxis dataValue:x COMMA
                    Yaxis dataValue:y COMMA LABEL STRING:label CLOSEBRACKET     {:  points.add(new DataGraph(x, y, parser.removeQuotes(label)));
                                                                                    RESULT = points;                                :}
                ;

pieGraphDecl::=
                    pieDataDecl:data CLOSEBRACE COMMA pieChart:chart            {:  RESULT = new PieGraph(data, chart);:}
                |   pieDataDecl:data CLOSEBRACE                                 {:  RESULT = new PieGraph(data);:}
                ;

pieDataDecl::=
                    LABEL STRING:label COMMA VALUE dataValue:val CLOSEBRACKET   {:  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val));
                                                                                    RESULT = data;                                  :}
                |   LABEL STRING:label COMMA VALUE dataValue:val COMMA COLOR
                    HEXCODE:col CLOSEBRACKET                                    {:  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val, parser.removeQuotes(col)));
                                                                                    RESULT = data;                                  :}
                |   pieDataDecl:pieData COMMA OPENBRACKET LABEL STRING:label COMMA
                    VALUE dataValue:val CLOSEBRACKET                            {:  pieData.add(new DataGraph(parser.removeQuotes(label), val));
                                                                                    RESULT=pieData;                                 :}
                |   pieDataDecl:pieData COMMA OPENBRACKET LABEL STRING:label COMMA
                    VALUE dataValue:val COMMA COLOR HEXCODE:col CLOSEBRACKET    {:  pieData.add(new DataGraph(parser.removeQuotes(label), val, parser.removeQuotes(col)));
                                                                                    RESULT=pieData;                                 :}
                ;

plotGraphDecl::=
                     plotsData:data CLOSEBRACE COMMA chartGraphs:chart          {:  RESULT = new PlotGraph(data, chart);:}
                |    plotsData:data CLOSEBRACE                                  {:  RESULT = new PlotGraph(data);:}
                ;

plotsData::=
                    Xaxis dataValue:x COMMA Yaxis dataValue:y  CLOSEBRACKET     {:  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y));
                                                                                    RESULT = data;                                  :}
                |   Xaxis dataValue:x COMMA Yaxis dataValue:y COMMA SIZE NUMBER:s
                    COMMA COLOR HEXCODE:col CLOSEBRACKET                        {:  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(x, y, Integer.parseInt(s), parser.removeQuotes(col)));
                                                                                    RESULT = data;                                  :}
                |   plotsData:points COMMA OPENBRACKET  Xaxis dataValue:x COMMA Yaxis
                    dataValue:y    CLOSEBRACKET                                 {:  points.add(new DataGraph(x, y));
                                                                                    RESULT = points;                                :}
                |   plotsData:points COMMA OPENBRACKET  Xaxis dataValue:x COMMA Yaxis
                    dataValue:y  COMMA SIZE NUMBER:s COMMA COLOR HEXCODE:col
                    CLOSEBRACKET                                                {:  points.add(new DataGraph(x, y, Integer.parseInt(s), parser.removeQuotes(col)));
                                                                                    RESULT = points;                                :}
                ;

dataDecl::=
                    CATEGORY STRING:cat COMMA VALUE dataValue:val CLOSEBRACKET  {:  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(cat), val));
                                                                                    RESULT = data;                                  :}
                |   CATEGORY STRING:cat COMMA VALUE dataValue:val COMMA COLOR
                    HEXCODE:col CLOSEBRACKET                                    {:  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(cat), val, parser.removeQuotes(col)));
                                                                                    RESULT = data;                                  :}
                |   dataDecl:barsData COMMA OPENBRACKET CATEGORY STRING:cat COMMA
                    VALUE dataValue:val CLOSEBRACKET                            {:  barsData.add(new DataGraph(parser.removeQuotes(cat), val));
                                                                                    RESULT=barsData;                                :}
                |   dataDecl:barsData COMMA OPENBRACKET CATEGORY STRING:cat COMMA
                    VALUE dataValue:val COMMA COLOR HEXCODE:col CLOSEBRACKET    {:  barsData.add(new DataGraph(parser.removeQuotes(cat), val, parser.removeQuotes(col)));
                                                                                    RESULT=barsData;                                :}
                ;


chartGraphs::=
                    CHART OPENBRACKET TITTLE STRING:tittle COMMA XAXISLABEL
                    STRING:xLabel COMMA YAXISLABEL STRING:yLabel CLOSEBRACKET   {:  RESULT = new ChartGraph(parser.removeQuotes(tittle), parser.removeQuotes(xLabel), parser.removeQuotes(yLabel));:}
                ;

pieChart::=
                    CHART OPENBRACKET TITTLE STRING:tittle COMMA
                    LEGENDPOSITION STRING:pos CLOSEBRACKET                      {:  RESULT = new ChartGraph(parser.removeQuotes(tittle), parser.removeQuotes(pos));:}
                ;

infoCard::=
                    VALUE dataValue:val COMMA LABEL STRING:label COMMA DESCRIPTION
                    STRING:desc CLOSEBRACKET                                    {:  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val));
                                                                                    RESULT = new PieGraph(data, parser.removeQuotes(desc));:}
                |   VALUE dataValue:val COMMA LABEL STRING:label COMMA DESCRIPTION
                    STRING:desc COMMA ICON STRING:icon COMMA COLOR HEXCODE:col
                    COMMA LINK STRING:link CLOSEBRACKET                         {:  ArrayList<DataGraph> data = new ArrayList<>();
                                                                                    data.add(new DataGraph(parser.removeQuotes(label), val, parser.removeQuotes(col)));
                                                                                    RESULT = new PieGraph(data, parser.removeQuotes(desc), parser.removeQuotes(icon), parser.removeQuotes(link));:}
                ;

sentencesDecl::=
                    ifDecl:ifSent                                               {:  parser.addSentence(ifSent);:}
                |   whileDecl:whileSent                                         {:  parser.addSentence(whileSent);:}
                |   forDecl:forSent                                             {:  parser.addSentence(forSent);:}
                |   doWhileDecl:dowhileSent                                     {:  parser.addSentence(dowhileSent);:}
                ;

ifDecl::=
                    IF OPENPARENTHESIS conditionalDecl:cond CLOSEPARENTHESIS
                    OPENBRACKET vls graphDecl:gr vls CLOSEBRACKET ELSE OPENBRACKET
                    graphDecl:gr2 CLOSEBRACKET                                  {: RESULT = new IfElSentence(gr, gr2, cond); :}
                |   IF OPENPARENTHESIS conditionalDecl:cond CLOSEPARENTHESIS
                    OPENBRACKET vls graphDecl:gr vls CLOSEBRACKET               {: RESULT = new IfElSentence(gr, cond); :}
                ;

forDecl::=
                    FOR OPENPARENTHESIS IDENTIFIER:id ASSIGN NUMBER:num SEMICOLON
                    IDENTIFIER logicalOperators:logOp forCondition:fcond SEMICOLON IDENTIFIER
                    passOperators:passOp CLOSEPARENTHESIS
                    OPENBRACKET vls graphDecl:gr vls CLOSEBRACKET               {:  RESULT = new ForSentence(gr, id, Integer.parseInt(num), logOp, fcond, passOp);:}
                ;

forCondition::=     NUMBER:num                                                  {:  RESULT = num;:}
                |   IDENTIFIER:id                                               {:  RESULT = id; :}
                ;

whileDecl::=
                    WHILE OPENPARENTHESIS conditionalDecl:cond CLOSEPARENTHESIS
                    OPENBRACKET vls graphDecl:gr vls CLOSEBRACKET               {:  RESULT = new WhileSentence(gr, cond);:}
                ;

doWhileDecl::=
                    DOWHILE OPENBRACKET vls graphDecl:gr vls CLOSEBRACKET WHILE
                    OPENPARENTHESIS conditionalDecl:cond CLOSEPARENTHESIS
                    SEMICOLON                                                   {:  RESULT = new DoSentence(gr, cond);:}
                    ;

conditionalDecl::=
                |   NUMBER:num logicalOperators:op NUMBER:num2                  {:  RESULT = new Conditional(num, op.toString(), num2);:}
                |   STRING:str logicalOperators:op STRING:str2                  {:  RESULT = new Conditional(parser.removeQuotes(str), op.toString(), parser.removeQuotes(str2));:}
                |   TRUE
                |   FALSE
                ;
vls::=              vars
                |
                ;
vars::=
                    IDENTIFIER:id varAssign                                     {:  parser.addSym(parser.removeQuotes(id), val);:}
                |   vars IDENTIFIER:id varAssign                                {:  parser.addSym(parser.removeQuotes(id), val);:}
                ;
varAssign::=        ASSIGN varDecl:val                                          {:  RESULT = val;:}
                |   passOperators:val                                           {:  RESULT = val;:}
                |   passOperators:val NUMBER:val1                               {:  RESULT =id+val;:}
                ;
varDecl::=
                    STRING:val SEMICOLON                                        {:  RESULT = val; :}
                |   NUMBER:val SEMICOLON                                        {:  RESULT = val; :}
                |   TRUE SEMICOLON                                              {:  RESULT = Boolean.TRUE;:}
                |   FALSE SEMICOLON                                             {:  RESULT = Boolean.FALSE;:}
                ;

dataValue::=
                    NUMBER:num                                                  {:  RESULT = Integer.parseInt(num);:}
                |   multiplyData:mul                                            {:  RESULT = mul;:}
                ;

multiplyData::=     NUMBER:num ASTHERISK NUMBER:num2                            {:  RESULT = Integer.parseInt(num) * Integer.parseInt(num2);:}
                |   NUMBER:num ASTHERISK IDENTIFIER:id                          {:  RESULT = Integer.parseInt(num) * parser.getIntValue(id);:}
                |   IDENTIFIER:id ASTHERISK NUMBER:num                          {:  RESULT = parser.getIntValue(id) * Integer.parseInt(num);:}
                |   IDENTIFIER:id ASTHERISK IDENTIFIER:id2                       {:  RESULT = parser.getIntValue(id) * parser.getIntValue(id2);:}
                ;

passOperators::=
                    SUM:s                                                       {:  RESULT = s.toString();:}
                |   SUB:s                                                       {:  RESULT = s.toString();:}
                |   MUL:s                                                       {:  RESULT = s.toString();:}
                |   DIV:s                                                       {:  RESULT = s.toString();:}
                ;

mathOperators::=
                    PLUS:p                                                      {:  RESULT = p.toString();:}
                |   MINUS:p                                                     {:  RESULT = p.toString();:}
                |   ASTHERISK:p                                                 {:  RESULT = p.toString();:}
                |   DIVIDE:p                                                    {:  RESULT = p.toString();:}
                |   passOperators:p                                             {:  RESULT = p.toString();:}
                ;

logicalOperators::=
                    EQUALS:e                                                    {:  RESULT = e.toString();:}
                |   DIFFERENT:e                                                 {:  RESULT = e.toString();:}
                |   GREATER:e                                                   {:  RESULT = e.toString();:}
                |   LESS:e                                                      {:  RESULT = e.toString();:}
                |   GREATEREQUAL:e                                              {:  RESULT = e.toString();:}
                |   LESSEQUAL:e                                                 {:  RESULT = e.toString();:}
                ;